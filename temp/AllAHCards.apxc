//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class AllAHCards {

	public class 01015 {
		public String 01015 {get;set;} 

		public 01015(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01015') {
							01015 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '01015 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 01014 {
		public String 01014 {get;set;} 

		public 01014(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01014') {
							01014 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '01014 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 01013 {
		public String 01013 {get;set;} 
		public String 90019 {get;set;} 

		public 01013(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01013') {
							01013 = parser.getText();
						} else if (text == '90019') {
							90019 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '01013 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 01012 {
		public String 01012 {get;set;} 
		public String 90018 {get;set;} 

		public 01012(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01012') {
							01012 = parser.getText();
						} else if (text == '90018') {
							90018 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '01012 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 01011 {
		public String 01011 {get;set;} 
		public String 90010 {get;set;} 

		public 01011(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01011') {
							01011 = parser.getText();
						} else if (text == '90010') {
							90010 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '01011 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 01010 {
		public String 01010 {get;set;} 
		public String 90009 {get;set;} 

		public 01010(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01010') {
							01010 = parser.getText();
						} else if (text == '90009') {
							90009 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '01010 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 01009 {
		public String 01009 {get;set;} 
		public String 90003 {get;set;} 

		public 01009(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01009') {
							01009 = parser.getText();
						} else if (text == '90003') {
							90003 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '01009 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_X {
		public List<String> trait {get;set;} 
		public Level level {get;set;} 
		public List<String> faction {get;set;} 
		public Integer limit_Z {get;set;} // in json: limit

		public Deck_options_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'trait') {
							trait = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'limit') {
							limit_Z = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_W {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public List<String> trait {get;set;} 

		public Deck_options_W(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'trait') {
							trait = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_W consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_Z {
		public Boolean not_Z {get;set;} // in json: not
		public List<String> trait {get;set;} 
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public Integer limit_Z {get;set;} // in json: limit
		public String error {get;set;} 

		public Deck_options_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'not') {
							not_Z = parser.getBooleanValue();
						} else if (text == 'trait') {
							trait = arrayOfString(parser);
						} else if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'limit') {
							limit_Z = parser.getIntegerValue();
						} else if (text == 'error') {
							error = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_Y {
		public Boolean not_Z {get;set;} // in json: not
		public List<String> trait {get;set;} 
		public Level level {get;set;} 
		public List<String> faction {get;set;} 
		public List<String> text {get;set;} 
		public Integer limit_Z {get;set;} // in json: limit
		public String error {get;set;} 

		public Deck_options_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'not') {
							not_Z = parser.getBooleanValue();
						} else if (text == 'trait') {
							trait = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'text') {
							text = arrayOfString(parser);
						} else if (text == 'limit') {
							limit_Z = parser.getIntegerValue();
						} else if (text == 'error') {
							error = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 01008 {
		public String 01008 {get;set;} 
		public String 90002 {get;set;} 

		public 01008(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01008') {
							01008 = parser.getText();
						} else if (text == '90002') {
							90002 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '01008 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 01007 {
		public String 01007 {get;set;} 
		public String 98006 {get;set;} 

		public 01007(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01007') {
							01007 = parser.getText();
						} else if (text == '98006') {
							98006 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '01007 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 06017 {
		public String 06017 {get;set;} 

		public 06017(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06017') {
							06017 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '06017 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 01006 {
		public String 01006 {get;set;} 
		public String 98005 {get;set;} 

		public 01006(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01006') {
							01006 = parser.getText();
						} else if (text == '98005') {
							98005 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '01006 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 99003 {
		public String 99003 {get;set;} 

		public 99003(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '99003') {
							99003 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '99003 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 99002 {
		public String 99002 {get;set;} 

		public 99002(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '99002') {
							99002 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '99002 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 06014 {
		public String 06014 {get;set;} 

		public 06014(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06014') {
							06014 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '06014 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 06013 {
		public String 06013 {get;set;} 

		public 06013(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06013') {
							06013 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '06013 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 06016 {
		public String 06016 {get;set;} 

		public 06016(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06016') {
							06016 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '06016 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 06010 {
		public String 06010 {get;set;} 

		public 06010(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06010') {
							06010 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '06010 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 06012 {
		public String 06012 {get;set;} 

		public 06012(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06012') {
							06012 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '06012 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 06011 {
		public String 06011 {get;set;} 

		public 06011(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06011') {
							06011 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '06011 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Linked_card {
		public String pack_code {get;set;} 
		public String pack_name {get;set;} 
		public String type_code {get;set;} 
		public String type_name {get;set;} 
		public String subtype_code {get;set;} 
		public String subtype_name {get;set;} 
		public String faction_code {get;set;} 
		public String faction_name {get;set;} 
		public Integer id {get;set;} 
		public Integer position {get;set;} 
		public Boolean exceptional {get;set;} 
		public Boolean myriad {get;set;} 
		public Object encounter_position {get;set;} 
		public String code {get;set;} 
		public String name {get;set;} 
		public String real_name {get;set;} 
		public String subname {get;set;} 
		public Object bonded_to {get;set;} 
		public Object bonded_count {get;set;} 
		public Object cost {get;set;} 
		public String text {get;set;} 
		public String real_text {get;set;} 
		public Integer quantity {get;set;} 
		public Object skill_willpower {get;set;} 
		public Object skill_intellect {get;set;} 
		public Object skill_combat {get;set;} 
		public Object skill_agility {get;set;} 
		public Object skill_wild {get;set;} 
		public Object xp {get;set;} 
		public Object shroud {get;set;} 
		public Object clues {get;set;} 
		public Boolean clues_fixed {get;set;} 
		public Object doom {get;set;} 
		public Object health {get;set;} 
		public Boolean health_per_investigator {get;set;} 
		public Object sanity {get;set;} 
		public Object enemy_damage {get;set;} 
		public Object enemy_horror {get;set;} 
		public Object enemy_fight {get;set;} 
		public Object enemy_evade {get;set;} 
		public Object victory {get;set;} 
		public Object vengeance {get;set;} 
		public Object deck_limit {get;set;} 
		public Object slot {get;set;} 
		public Object real_slot {get;set;} 
		public Object stage {get;set;} 
		public String traits {get;set;} 
		public String real_traits {get;set;} 
		public Object deck_requirements {get;set;} 
		public Object deck_options {get;set;} 
		public Object restrictions {get;set;} 
		public String flavor {get;set;} 
		public String illustrator {get;set;} 
		public Boolean is_unique {get;set;} 
		public Boolean exile {get;set;} 
		public Boolean hidden {get;set;} 
		public Boolean permanent {get;set;} 
		public Boolean double_sided {get;set;} 
		public Object back_text {get;set;} 
		public Object back_flavor {get;set;} 
		public Object back_name {get;set;} 
		public Object octgn_id {get;set;} 
		public String url {get;set;} 
		public String imagesrc {get;set;} 

		public Linked_card(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'pack_code') {
							pack_code = parser.getText();
						} else if (text == 'pack_name') {
							pack_name = parser.getText();
						} else if (text == 'type_code') {
							type_code = parser.getText();
						} else if (text == 'type_name') {
							type_name = parser.getText();
						} else if (text == 'subtype_code') {
							subtype_code = parser.getText();
						} else if (text == 'subtype_name') {
							subtype_name = parser.getText();
						} else if (text == 'faction_code') {
							faction_code = parser.getText();
						} else if (text == 'faction_name') {
							faction_name = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'position') {
							position = parser.getIntegerValue();
						} else if (text == 'exceptional') {
							exceptional = parser.getBooleanValue();
						} else if (text == 'myriad') {
							myriad = parser.getBooleanValue();
						} else if (text == 'encounter_position') {
							encounter_position = parser.readValueAs(Object.class);
						} else if (text == 'code') {
							code = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'real_name') {
							real_name = parser.getText();
						} else if (text == 'subname') {
							subname = parser.getText();
						} else if (text == 'bonded_to') {
							bonded_to = parser.readValueAs(Object.class);
						} else if (text == 'bonded_count') {
							bonded_count = parser.readValueAs(Object.class);
						} else if (text == 'cost') {
							cost = parser.readValueAs(Object.class);
						} else if (text == 'text') {
							text = parser.getText();
						} else if (text == 'real_text') {
							real_text = parser.getText();
						} else if (text == 'quantity') {
							quantity = parser.getIntegerValue();
						} else if (text == 'skill_willpower') {
							skill_willpower = parser.readValueAs(Object.class);
						} else if (text == 'skill_intellect') {
							skill_intellect = parser.readValueAs(Object.class);
						} else if (text == 'skill_combat') {
							skill_combat = parser.readValueAs(Object.class);
						} else if (text == 'skill_agility') {
							skill_agility = parser.readValueAs(Object.class);
						} else if (text == 'skill_wild') {
							skill_wild = parser.readValueAs(Object.class);
						} else if (text == 'xp') {
							xp = parser.readValueAs(Object.class);
						} else if (text == 'shroud') {
							shroud = parser.readValueAs(Object.class);
						} else if (text == 'clues') {
							clues = parser.readValueAs(Object.class);
						} else if (text == 'clues_fixed') {
							clues_fixed = parser.getBooleanValue();
						} else if (text == 'doom') {
							doom = parser.readValueAs(Object.class);
						} else if (text == 'health') {
							health = parser.readValueAs(Object.class);
						} else if (text == 'health_per_investigator') {
							health_per_investigator = parser.getBooleanValue();
						} else if (text == 'sanity') {
							sanity = parser.readValueAs(Object.class);
						} else if (text == 'enemy_damage') {
							enemy_damage = parser.readValueAs(Object.class);
						} else if (text == 'enemy_horror') {
							enemy_horror = parser.readValueAs(Object.class);
						} else if (text == 'enemy_fight') {
							enemy_fight = parser.readValueAs(Object.class);
						} else if (text == 'enemy_evade') {
							enemy_evade = parser.readValueAs(Object.class);
						} else if (text == 'victory') {
							victory = parser.readValueAs(Object.class);
						} else if (text == 'vengeance') {
							vengeance = parser.readValueAs(Object.class);
						} else if (text == 'deck_limit') {
							deck_limit = parser.readValueAs(Object.class);
						} else if (text == 'slot') {
							slot = parser.readValueAs(Object.class);
						} else if (text == 'real_slot') {
							real_slot = parser.readValueAs(Object.class);
						} else if (text == 'stage') {
							stage = parser.readValueAs(Object.class);
						} else if (text == 'traits') {
							traits = parser.getText();
						} else if (text == 'real_traits') {
							real_traits = parser.getText();
						} else if (text == 'deck_requirements') {
							deck_requirements = parser.readValueAs(Object.class);
						} else if (text == 'deck_options') {
							deck_options = parser.readValueAs(Object.class);
						} else if (text == 'restrictions') {
							restrictions = parser.readValueAs(Object.class);
						} else if (text == 'flavor') {
							flavor = parser.getText();
						} else if (text == 'illustrator') {
							illustrator = parser.getText();
						} else if (text == 'is_unique') {
							is_unique = parser.getBooleanValue();
						} else if (text == 'exile') {
							exile = parser.getBooleanValue();
						} else if (text == 'hidden') {
							hidden = parser.getBooleanValue();
						} else if (text == 'permanent') {
							permanent = parser.getBooleanValue();
						} else if (text == 'double_sided') {
							double_sided = parser.getBooleanValue();
						} else if (text == 'back_text') {
							back_text = parser.readValueAs(Object.class);
						} else if (text == 'back_flavor') {
							back_flavor = parser.readValueAs(Object.class);
						} else if (text == 'back_name') {
							back_name = parser.readValueAs(Object.class);
						} else if (text == 'octgn_id') {
							octgn_id = parser.readValueAs(Object.class);
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'imagesrc') {
							imagesrc = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Linked_card consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 02009 {
		public String 02009 {get;set;} 

		public 02009(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02009') {
							02009 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '02009 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 02008 {
		public String 02008 {get;set;} 

		public 02008(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02008') {
							02008 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '02008 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 02007 {
		public String 02007 {get;set;} 

		public 02007(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02007') {
							02007 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '02007 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 02006 {
		public String 02006 {get;set;} 

		public 02006(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02006') {
							02006 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '02006 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 07016 {
		public String 07016 {get;set;} 
		public String 98015 {get;set;} 

		public 07016(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07016') {
							07016 = parser.getText();
						} else if (text == '98015') {
							98015 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '07016 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 07014 {
		public String 07014 {get;set;} 
		public String 98014 {get;set;} 

		public 07014(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07014') {
							07014 = parser.getText();
						} else if (text == '98014') {
							98014 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '07014 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 07015 {
		public String 07015 {get;set;} 
		public String 98014 {get;set;} 

		public 07015(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07015') {
							07015 = parser.getText();
						} else if (text == '98014') {
							98014 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '07015 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 07012 {
		public String 07012 {get;set;} 
		public String 98017 {get;set;} 

		public 07012(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07012') {
							07012 = parser.getText();
						} else if (text == '98017') {
							98017 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '07012 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 07013 {
		public String 07013 {get;set;} 
		public String 98018 {get;set;} 

		public 07013(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07013') {
							07013 = parser.getText();
						} else if (text == '98018') {
							98018 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '07013 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 07010 {
		public String 07010 {get;set;} 

		public 07010(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07010') {
							07010 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '07010 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 07011 {
		public String 07011 {get;set;} 

		public 07011(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07011') {
							07011 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '07011 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 07009 {
		public String 07009 {get;set;} 

		public 07009(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07009') {
							07009 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '07009 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 07007 {
		public String 07007 {get;set;} 

		public 07007(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07007') {
							07007 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '07007 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 07008 {
		public String 07008 {get;set;} 

		public 07008(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07008') {
							07008 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '07008 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 07006 {
		public String 07006 {get;set;} 

		public 07006(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07006') {
							07006 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '07006 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 05017 {
		public String 05017 {get;set;} 

		public 05017(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05017') {
							05017 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '05017 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 05016 {
		public String 05016 {get;set;} 

		public 05016(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05016') {
							05016 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '05016 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 05019 {
		public String 05019 {get;set;} 

		public 05019(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05019') {
							05019 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '05019 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 05018 {
		public String 05018 {get;set;} 

		public 05018(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05018') {
							05018 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '05018 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 05013 {
		public String 05013 {get;set;} 

		public 05013(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05013') {
							05013 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '05013 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 05012 {
		public String 05012 {get;set;} 

		public 05012(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05012') {
							05012 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '05012 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 05015 {
		public String 05015 {get;set;} 

		public 05015(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05015') {
							05015 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '05015 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 05014 {
		public String 05014 {get;set;} 

		public 05014(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05014') {
							05014 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '05014 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 05011 {
		public String 05011 {get;set;} 

		public 05011(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05011') {
							05011 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '05011 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 05010 {
		public String 05010 {get;set;} 

		public 05010(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05010') {
							05010 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '05010 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 05009 {
		public String 05009 {get;set;} 

		public 05009(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05009') {
							05009 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '05009 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 05008 {
		public String 05008 {get;set;} 
		public String 98012 {get;set;} 

		public 05008(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05008') {
							05008 = parser.getText();
						} else if (text == '98012') {
							98012 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '05008 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 05007 {
		public String 05007 {get;set;} 
		public String 98011 {get;set;} 

		public 05007(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05007') {
							05007 = parser.getText();
						} else if (text == '98011') {
							98011 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '05007 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 01006_Z {
		public String 01006 {get;set;} 

		public 01006_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01006') {
							01006 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '01006_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_X {
		public Integer size {get;set;} 
		public Card_X card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_X(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_W {
		public Integer size {get;set;} 
		public Card_W card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_W(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_W(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_W consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_V {
		public Integer size {get;set;} 
		public Card_V card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_V(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_V(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_V consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_U {
		public Integer size {get;set;} 
		public Card_U card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_U(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_U(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_U consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_T {
		public Integer size {get;set;} 
		public Card_T card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_T(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_T(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_T consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_S {
		public Integer size {get;set;} 
		public Card_S card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_S(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_S(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_S consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_R {
		public Integer size {get;set;} 
		public Card_R card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_R(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_R(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_R consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_Q {
		public Integer size {get;set;} 
		public Card_Q card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_Q(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_Q(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_Q consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_P {
		public Integer size {get;set;} 
		public Card_P card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_P(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_P(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_P consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_O {
		public Integer size {get;set;} 
		public Card_O card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_O(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_O(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_O consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_N {
		public Integer size {get;set;} 
		public Card_N card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_N(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_N(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_N consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_M {
		public Integer size {get;set;} 
		public Card_M card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_M(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_M(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_M consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_L {
		public Integer size {get;set;} 
		public Card_L card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_L(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_L(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_L consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 06007 {
		public String 06007 {get;set;} 

		public 06007(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06007') {
							06007 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '06007 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_K {
		public Integer size {get;set;} 
		public Card_K card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_K(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_K(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_K consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 06006 {
		public String 06006 {get;set;} 

		public 06006(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06006') {
							06006 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '06006 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_J {
		public Integer size {get;set;} 
		public Card_J card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_J(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_J(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_J consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 06009 {
		public String 06009 {get;set;} 

		public 06009(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06009') {
							06009 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '06009 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_I {
		public Integer size {get;set;} 
		public Card_I card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_I(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_I(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_I consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 06008 {
		public String 06008 {get;set;} 

		public 06008(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06008') {
							06008 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '06008 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_H {
		public Integer size {get;set;} 
		public Card_H card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_H(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_H(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_H consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_G {
		public Integer size {get;set;} 
		public Card_G card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_G(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_G(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_G consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_F {
		public Integer size {get;set;} 
		public Card_F card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_F(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_F(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_F consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_E {
		public Integer size {get;set;} 
		public Card_E card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_E(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_E(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_E consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_D {
		public Integer size {get;set;} 
		public Card_D card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_D(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_D(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_D consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_C {
		public Integer size {get;set;} 
		public Card_C card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_C(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_C(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_C consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_B {
		public Integer size {get;set;} 
		public Card_B card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_B(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_B(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_B consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_A {
		public Integer size {get;set;} 
		public Card_A card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_A(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_A(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_A consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_O {
		public 03012 03012 {get;set;} 
		public 03013 03013 {get;set;} 

		public Card_O(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03012') {
							03012 = new 03012(parser);
						} else if (text == '03013') {
							03013 = new 03013(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_O consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_P {
		public 03010 03010 {get;set;} 
		public 03011 03011 {get;set;} 

		public Card_P(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03010') {
							03010 = new 03010(parser);
						} else if (text == '03011') {
							03011 = new 03011(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_P consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_Q {
		public 03007 03007 {get;set;} 
		public 03008 03008 {get;set;} 
		public 03009 03009 {get;set;} 

		public Card_Q(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03007') {
							03007 = new 03007(parser);
						} else if (text == '03008') {
							03008 = new 03008(parser);
						} else if (text == '03009') {
							03009 = new 03009(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_Q consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_R {
		public 02014 02014 {get;set;} 
		public 02015 02015 {get;set;} 

		public Card_R(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02014') {
							02014 = new 02014(parser);
						} else if (text == '02015') {
							02015 = new 02015(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_R consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_S {
		public 02012 02012 {get;set;} 
		public 02013 02013 {get;set;} 

		public Card_S(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02012') {
							02012 = new 02012(parser);
						} else if (text == '02013') {
							02013 = new 02013(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_S consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_T {
		public 02010 02010 {get;set;} 
		public 02011 02011 {get;set;} 

		public Card_T(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02010') {
							02010 = new 02010(parser);
						} else if (text == '02011') {
							02011 = new 02011(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_T consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_U {
		public 02008 02008 {get;set;} 
		public 02009 02009 {get;set;} 

		public Card_U(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02008') {
							02008 = new 02008(parser);
						} else if (text == '02009') {
							02009 = new 02009(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_U consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_V {
		public 02006 02006 {get;set;} 
		public 02007 02007 {get;set;} 

		public Card_V(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02006') {
							02006 = new 02006(parser);
						} else if (text == '02007') {
							02007 = new 02007(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_V consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_W {
		public 01014 01014 {get;set;} 
		public 01015 01015 {get;set;} 

		public Card_W(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01014') {
							01014 = new 01014(parser);
						} else if (text == '01015') {
							01015 = new 01015(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_W consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_X {
		public 01012 01012 {get;set;} 
		public 01013 01013 {get;set;} 

		public Card_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01012') {
							01012 = new 01012(parser);
						} else if (text == '01013') {
							01013 = new 01013(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_Y {
		public 01010 01010 {get;set;} 
		public 01011 01011 {get;set;} 

		public Card_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01010') {
							01010 = new 01010(parser);
						} else if (text == '01011') {
							01011 = new 01011(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_Z {
		public 01008 01008 {get;set;} 
		public 01009 01009 {get;set;} 

		public Card_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01008') {
							01008 = new 01008(parser);
						} else if (text == '01009') {
							01009 = new 01009(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 60503 {
		public String 60503 {get;set;} 

		public 60503(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60503') {
							60503 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '60503 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 60502 {
		public String 60502 {get;set;} 

		public 60502(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60502') {
							60502 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '60502 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_Z {
		public Integer size {get;set;} 
		public Card_Z card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_Z(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_Y {
		public Integer size {get;set;} 
		public Card_Y card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_Y(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 04008 {
		public String 04008 {get;set;} 

		public 04008(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04008') {
							04008 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '04008 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 04009 {
		public String 04009 {get;set;} 

		public 04009(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04009') {
							04009 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '04009 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements {
		public Integer size {get;set;} 
		public Card card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 04006 {
		public String 04006 {get;set;} 

		public 04006(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04006') {
							04006 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '04006 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 04007 {
		public String 04007 {get;set;} 

		public 04007(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04007') {
							04007 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '04007 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_A {
		public 05018 05018 {get;set;} 
		public 05019 05019 {get;set;} 

		public Card_A(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05018') {
							05018 = new 05018(parser);
						} else if (text == '05019') {
							05019 = new 05019(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_A consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_B {
		public 05016 05016 {get;set;} 
		public 05017 05017 {get;set;} 

		public Card_B(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05016') {
							05016 = new 05016(parser);
						} else if (text == '05017') {
							05017 = new 05017(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_B consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_C {
		public 05013 05013 {get;set;} 
		public 05014 05014 {get;set;} 
		public 05015 05015 {get;set;} 

		public Card_C(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05013') {
							05013 = new 05013(parser);
						} else if (text == '05014') {
							05014 = new 05014(parser);
						} else if (text == '05015') {
							05015 = new 05015(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_C consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_D {
		public 05011 05011 {get;set;} 
		public 05012 05012 {get;set;} 

		public Card_D(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05011') {
							05011 = new 05011(parser);
						} else if (text == '05012') {
							05012 = new 05012(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_D consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_E {
		public 05009 05009 {get;set;} 
		public 05010 05010 {get;set;} 

		public Card_E(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05009') {
							05009 = new 05009(parser);
						} else if (text == '05010') {
							05010 = new 05010(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_E consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_F {
		public 05007 05007 {get;set;} 
		public 05008 05008 {get;set;} 

		public Card_F(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05007') {
							05007 = new 05007(parser);
						} else if (text == '05008') {
							05008 = new 05008(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_F consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_G {
		public 04015 04015 {get;set;} 
		public 04016 04016 {get;set;} 

		public Card_G(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04015') {
							04015 = new 04015(parser);
						} else if (text == '04016') {
							04016 = new 04016(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_G consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_H {
		public 04013 04013 {get;set;} 
		public 04014 04014 {get;set;} 

		public Card_H(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04013') {
							04013 = new 04013(parser);
						} else if (text == '04014') {
							04014 = new 04014(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_H consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_I {
		public 04010 04010 {get;set;} 
		public 04011 04011 {get;set;} 
		public 04012 04012 {get;set;} 

		public Card_I(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04010') {
							04010 = new 04010(parser);
						} else if (text == '04011') {
							04011 = new 04011(parser);
						} else if (text == '04012') {
							04012 = new 04012(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_I consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_J {
		public 04008 04008 {get;set;} 
		public 04009 04009 {get;set;} 

		public Card_J(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04008') {
							04008 = new 04008(parser);
						} else if (text == '04009') {
							04009 = new 04009(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_J consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_K {
		public 04006 04006 {get;set;} 
		public 04007 04007 {get;set;} 

		public Card_K(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04006') {
							04006 = new 04006(parser);
						} else if (text == '04007') {
							04007 = new 04007(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_K consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_L {
		public 03018 03018 {get;set;} 
		public 03019 03019 {get;set;} 

		public Card_L(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03018') {
							03018 = new 03018(parser);
						} else if (text == '03019') {
							03019 = new 03019(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_L consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions {
		public Investigator investigator {get;set;} 

		public Restrictions(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_M {
		public 03016 03016 {get;set;} 
		public 03017 03017 {get;set;} 

		public Card_M(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03016') {
							03016 = new 03016(parser);
						} else if (text == '03017') {
							03017 = new 03017(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_M consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_N {
		public 03014 03014 {get;set;} 
		public 03015 03015 {get;set;} 

		public Card_N(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03014') {
							03014 = new 03014(parser);
						} else if (text == '03015') {
							03015 = new 03015(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_N consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Linked_card_Z {
		public String pack_code {get;set;} 
		public String pack_name {get;set;} 
		public String type_code {get;set;} 
		public String type_name {get;set;} 
		public String faction_code {get;set;} 
		public String faction_name {get;set;} 
		public String encounter_code {get;set;} 
		public String encounter_name {get;set;} 
		public Integer id {get;set;} 
		public Integer position {get;set;} 
		public Boolean exceptional {get;set;} 
		public Boolean myriad {get;set;} 
		public Integer encounter_position {get;set;} 
		public String code {get;set;} 
		public String name {get;set;} 
		public String real_name {get;set;} 
		public Object subname {get;set;} 
		public Object bonded_to {get;set;} 
		public Object bonded_count {get;set;} 
		public Object cost {get;set;} 
		public String text {get;set;} 
		public String real_text {get;set;} 
		public Integer quantity {get;set;} 
		public Object skill_willpower {get;set;} 
		public Object skill_intellect {get;set;} 
		public Object skill_combat {get;set;} 
		public Object skill_agility {get;set;} 
		public Object skill_wild {get;set;} 
		public Object xp {get;set;} 
		public Object shroud {get;set;} 
		public Object clues {get;set;} 
		public Boolean clues_fixed {get;set;} 
		public Object doom {get;set;} 
		public Object health {get;set;} 
		public Boolean health_per_investigator {get;set;} 
		public Object sanity {get;set;} 
		public Object enemy_damage {get;set;} 
		public Object enemy_horror {get;set;} 
		public Object enemy_fight {get;set;} 
		public Object enemy_evade {get;set;} 
		public Object victory {get;set;} 
		public Object vengeance {get;set;} 
		public Object deck_limit {get;set;} 
		public Object slot {get;set;} 
		public String real_slot {get;set;} 
		public Object stage {get;set;} 
		public Object traits {get;set;} 
		public Object real_traits {get;set;} 
		public Object deck_requirements {get;set;} 
		public Object deck_options {get;set;} 
		public Object restrictions {get;set;} 
		public String flavor {get;set;} 
		public Object illustrator {get;set;} 
		public Boolean is_unique {get;set;} 
		public Boolean exile {get;set;} 
		public Boolean hidden {get;set;} 
		public Boolean permanent {get;set;} 
		public Boolean double_sided {get;set;} 
		public Object back_text {get;set;} 
		public Object back_flavor {get;set;} 
		public Object back_name {get;set;} 
		public String octgn_id {get;set;} 
		public String url {get;set;} 
		public String imagesrc {get;set;} 
		public Integer spoiler {get;set;} 

		public Linked_card_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'pack_code') {
							pack_code = parser.getText();
						} else if (text == 'pack_name') {
							pack_name = parser.getText();
						} else if (text == 'type_code') {
							type_code = parser.getText();
						} else if (text == 'type_name') {
							type_name = parser.getText();
						} else if (text == 'faction_code') {
							faction_code = parser.getText();
						} else if (text == 'faction_name') {
							faction_name = parser.getText();
						} else if (text == 'encounter_code') {
							encounter_code = parser.getText();
						} else if (text == 'encounter_name') {
							encounter_name = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'position') {
							position = parser.getIntegerValue();
						} else if (text == 'exceptional') {
							exceptional = parser.getBooleanValue();
						} else if (text == 'myriad') {
							myriad = parser.getBooleanValue();
						} else if (text == 'encounter_position') {
							encounter_position = parser.getIntegerValue();
						} else if (text == 'code') {
							code = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'real_name') {
							real_name = parser.getText();
						} else if (text == 'subname') {
							subname = parser.readValueAs(Object.class);
						} else if (text == 'bonded_to') {
							bonded_to = parser.readValueAs(Object.class);
						} else if (text == 'bonded_count') {
							bonded_count = parser.readValueAs(Object.class);
						} else if (text == 'cost') {
							cost = parser.readValueAs(Object.class);
						} else if (text == 'text') {
							text = parser.getText();
						} else if (text == 'real_text') {
							real_text = parser.getText();
						} else if (text == 'quantity') {
							quantity = parser.getIntegerValue();
						} else if (text == 'skill_willpower') {
							skill_willpower = parser.readValueAs(Object.class);
						} else if (text == 'skill_intellect') {
							skill_intellect = parser.readValueAs(Object.class);
						} else if (text == 'skill_combat') {
							skill_combat = parser.readValueAs(Object.class);
						} else if (text == 'skill_agility') {
							skill_agility = parser.readValueAs(Object.class);
						} else if (text == 'skill_wild') {
							skill_wild = parser.readValueAs(Object.class);
						} else if (text == 'xp') {
							xp = parser.readValueAs(Object.class);
						} else if (text == 'shroud') {
							shroud = parser.readValueAs(Object.class);
						} else if (text == 'clues') {
							clues = parser.readValueAs(Object.class);
						} else if (text == 'clues_fixed') {
							clues_fixed = parser.getBooleanValue();
						} else if (text == 'doom') {
							doom = parser.readValueAs(Object.class);
						} else if (text == 'health') {
							health = parser.readValueAs(Object.class);
						} else if (text == 'health_per_investigator') {
							health_per_investigator = parser.getBooleanValue();
						} else if (text == 'sanity') {
							sanity = parser.readValueAs(Object.class);
						} else if (text == 'enemy_damage') {
							enemy_damage = parser.readValueAs(Object.class);
						} else if (text == 'enemy_horror') {
							enemy_horror = parser.readValueAs(Object.class);
						} else if (text == 'enemy_fight') {
							enemy_fight = parser.readValueAs(Object.class);
						} else if (text == 'enemy_evade') {
							enemy_evade = parser.readValueAs(Object.class);
						} else if (text == 'victory') {
							victory = parser.readValueAs(Object.class);
						} else if (text == 'vengeance') {
							vengeance = parser.readValueAs(Object.class);
						} else if (text == 'deck_limit') {
							deck_limit = parser.readValueAs(Object.class);
						} else if (text == 'slot') {
							slot = parser.readValueAs(Object.class);
						} else if (text == 'real_slot') {
							real_slot = parser.getText();
						} else if (text == 'stage') {
							stage = parser.readValueAs(Object.class);
						} else if (text == 'traits') {
							traits = parser.readValueAs(Object.class);
						} else if (text == 'real_traits') {
							real_traits = parser.readValueAs(Object.class);
						} else if (text == 'deck_requirements') {
							deck_requirements = parser.readValueAs(Object.class);
						} else if (text == 'deck_options') {
							deck_options = parser.readValueAs(Object.class);
						} else if (text == 'restrictions') {
							restrictions = parser.readValueAs(Object.class);
						} else if (text == 'flavor') {
							flavor = parser.getText();
						} else if (text == 'illustrator') {
							illustrator = parser.readValueAs(Object.class);
						} else if (text == 'is_unique') {
							is_unique = parser.getBooleanValue();
						} else if (text == 'exile') {
							exile = parser.getBooleanValue();
						} else if (text == 'hidden') {
							hidden = parser.getBooleanValue();
						} else if (text == 'permanent') {
							permanent = parser.getBooleanValue();
						} else if (text == 'double_sided') {
							double_sided = parser.getBooleanValue();
						} else if (text == 'back_text') {
							back_text = parser.readValueAs(Object.class);
						} else if (text == 'back_flavor') {
							back_flavor = parser.readValueAs(Object.class);
						} else if (text == 'back_name') {
							back_name = parser.readValueAs(Object.class);
						} else if (text == 'octgn_id') {
							octgn_id = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'imagesrc') {
							imagesrc = parser.getText();
						} else if (text == 'spoiler') {
							spoiler = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Linked_card_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Linked_card_Y {
		public String pack_code {get;set;} 
		public String pack_name {get;set;} 
		public String type_code {get;set;} 
		public String type_name {get;set;} 
		public String faction_code {get;set;} 
		public String faction_name {get;set;} 
		public String encounter_code {get;set;} 
		public String encounter_name {get;set;} 
		public Integer id {get;set;} 
		public Integer position {get;set;} 
		public Boolean exceptional {get;set;} 
		public Boolean myriad {get;set;} 
		public Integer encounter_position {get;set;} 
		public String code {get;set;} 
		public String name {get;set;} 
		public String real_name {get;set;} 
		public Object subname {get;set;} 
		public Object bonded_to {get;set;} 
		public Object bonded_count {get;set;} 
		public Object cost {get;set;} 
		public String text {get;set;} 
		public Object real_text {get;set;} 
		public Integer quantity {get;set;} 
		public Object skill_willpower {get;set;} 
		public Object skill_intellect {get;set;} 
		public Object skill_combat {get;set;} 
		public Object skill_agility {get;set;} 
		public Object skill_wild {get;set;} 
		public Object xp {get;set;} 
		public Integer shroud {get;set;} 
		public Integer clues {get;set;} 
		public Boolean clues_fixed {get;set;} 
		public Object doom {get;set;} 
		public Object health {get;set;} 
		public Boolean health_per_investigator {get;set;} 
		public Object sanity {get;set;} 
		public Object enemy_damage {get;set;} 
		public Object enemy_horror {get;set;} 
		public Object enemy_fight {get;set;} 
		public Object enemy_evade {get;set;} 
		public Object victory {get;set;} 
		public Object vengeance {get;set;} 
		public Object deck_limit {get;set;} 
		public Object slot {get;set;} 
		public String real_slot {get;set;} 
		public Object stage {get;set;} 
		public String traits {get;set;} 
		public String real_traits {get;set;} 
		public Object deck_requirements {get;set;} 
		public Object deck_options {get;set;} 
		public Object restrictions {get;set;} 
		public String flavor {get;set;} 
		public String illustrator {get;set;} 
		public Boolean is_unique {get;set;} 
		public Boolean exile {get;set;} 
		public Boolean hidden {get;set;} 
		public Boolean permanent {get;set;} 
		public Boolean double_sided {get;set;} 
		public Object back_text {get;set;} 
		public Object back_flavor {get;set;} 
		public Object back_name {get;set;} 
		public String octgn_id {get;set;} 
		public String url {get;set;} 
		public String imagesrc {get;set;} 
		public Integer spoiler {get;set;} 

		public Linked_card_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'pack_code') {
							pack_code = parser.getText();
						} else if (text == 'pack_name') {
							pack_name = parser.getText();
						} else if (text == 'type_code') {
							type_code = parser.getText();
						} else if (text == 'type_name') {
							type_name = parser.getText();
						} else if (text == 'faction_code') {
							faction_code = parser.getText();
						} else if (text == 'faction_name') {
							faction_name = parser.getText();
						} else if (text == 'encounter_code') {
							encounter_code = parser.getText();
						} else if (text == 'encounter_name') {
							encounter_name = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'position') {
							position = parser.getIntegerValue();
						} else if (text == 'exceptional') {
							exceptional = parser.getBooleanValue();
						} else if (text == 'myriad') {
							myriad = parser.getBooleanValue();
						} else if (text == 'encounter_position') {
							encounter_position = parser.getIntegerValue();
						} else if (text == 'code') {
							code = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'real_name') {
							real_name = parser.getText();
						} else if (text == 'subname') {
							subname = parser.readValueAs(Object.class);
						} else if (text == 'bonded_to') {
							bonded_to = parser.readValueAs(Object.class);
						} else if (text == 'bonded_count') {
							bonded_count = parser.readValueAs(Object.class);
						} else if (text == 'cost') {
							cost = parser.readValueAs(Object.class);
						} else if (text == 'text') {
							text = parser.getText();
						} else if (text == 'real_text') {
							real_text = parser.readValueAs(Object.class);
						} else if (text == 'quantity') {
							quantity = parser.getIntegerValue();
						} else if (text == 'skill_willpower') {
							skill_willpower = parser.readValueAs(Object.class);
						} else if (text == 'skill_intellect') {
							skill_intellect = parser.readValueAs(Object.class);
						} else if (text == 'skill_combat') {
							skill_combat = parser.readValueAs(Object.class);
						} else if (text == 'skill_agility') {
							skill_agility = parser.readValueAs(Object.class);
						} else if (text == 'skill_wild') {
							skill_wild = parser.readValueAs(Object.class);
						} else if (text == 'xp') {
							xp = parser.readValueAs(Object.class);
						} else if (text == 'shroud') {
							shroud = parser.getIntegerValue();
						} else if (text == 'clues') {
							clues = parser.getIntegerValue();
						} else if (text == 'clues_fixed') {
							clues_fixed = parser.getBooleanValue();
						} else if (text == 'doom') {
							doom = parser.readValueAs(Object.class);
						} else if (text == 'health') {
							health = parser.readValueAs(Object.class);
						} else if (text == 'health_per_investigator') {
							health_per_investigator = parser.getBooleanValue();
						} else if (text == 'sanity') {
							sanity = parser.readValueAs(Object.class);
						} else if (text == 'enemy_damage') {
							enemy_damage = parser.readValueAs(Object.class);
						} else if (text == 'enemy_horror') {
							enemy_horror = parser.readValueAs(Object.class);
						} else if (text == 'enemy_fight') {
							enemy_fight = parser.readValueAs(Object.class);
						} else if (text == 'enemy_evade') {
							enemy_evade = parser.readValueAs(Object.class);
						} else if (text == 'victory') {
							victory = parser.readValueAs(Object.class);
						} else if (text == 'vengeance') {
							vengeance = parser.readValueAs(Object.class);
						} else if (text == 'deck_limit') {
							deck_limit = parser.readValueAs(Object.class);
						} else if (text == 'slot') {
							slot = parser.readValueAs(Object.class);
						} else if (text == 'real_slot') {
							real_slot = parser.getText();
						} else if (text == 'stage') {
							stage = parser.readValueAs(Object.class);
						} else if (text == 'traits') {
							traits = parser.getText();
						} else if (text == 'real_traits') {
							real_traits = parser.getText();
						} else if (text == 'deck_requirements') {
							deck_requirements = parser.readValueAs(Object.class);
						} else if (text == 'deck_options') {
							deck_options = parser.readValueAs(Object.class);
						} else if (text == 'restrictions') {
							restrictions = parser.readValueAs(Object.class);
						} else if (text == 'flavor') {
							flavor = parser.getText();
						} else if (text == 'illustrator') {
							illustrator = parser.getText();
						} else if (text == 'is_unique') {
							is_unique = parser.getBooleanValue();
						} else if (text == 'exile') {
							exile = parser.getBooleanValue();
						} else if (text == 'hidden') {
							hidden = parser.getBooleanValue();
						} else if (text == 'permanent') {
							permanent = parser.getBooleanValue();
						} else if (text == 'double_sided') {
							double_sided = parser.getBooleanValue();
						} else if (text == 'back_text') {
							back_text = parser.readValueAs(Object.class);
						} else if (text == 'back_flavor') {
							back_flavor = parser.readValueAs(Object.class);
						} else if (text == 'back_name') {
							back_name = parser.readValueAs(Object.class);
						} else if (text == 'octgn_id') {
							octgn_id = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'imagesrc') {
							imagesrc = parser.getText();
						} else if (text == 'spoiler') {
							spoiler = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Linked_card_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card {
		public 01006 01006 {get;set;} 
		public 01007 01007 {get;set;} 

		public Card(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01006') {
							01006 = new 01006(parser);
						} else if (text == '01007') {
							01007 = new 01007(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Linked_card_T {
		public String pack_code {get;set;} 
		public String pack_name {get;set;} 
		public String type_code {get;set;} 
		public String type_name {get;set;} 
		public String faction_code {get;set;} 
		public String faction_name {get;set;} 
		public String encounter_code {get;set;} 
		public String encounter_name {get;set;} 
		public Integer id {get;set;} 
		public Integer position {get;set;} 
		public Boolean exceptional {get;set;} 
		public Boolean myriad {get;set;} 
		public Integer encounter_position {get;set;} 
		public String code {get;set;} 
		public String name {get;set;} 
		public String real_name {get;set;} 
		public Object subname {get;set;} 
		public Object bonded_to {get;set;} 
		public Object bonded_count {get;set;} 
		public Object cost {get;set;} 
		public String text {get;set;} 
		public String real_text {get;set;} 
		public Integer quantity {get;set;} 
		public Object skill_willpower {get;set;} 
		public Object skill_intellect {get;set;} 
		public Object skill_combat {get;set;} 
		public Object skill_agility {get;set;} 
		public Object skill_wild {get;set;} 
		public Object xp {get;set;} 
		public Integer shroud {get;set;} 
		public Integer clues {get;set;} 
		public Boolean clues_fixed {get;set;} 
		public Object doom {get;set;} 
		public Object health {get;set;} 
		public Boolean health_per_investigator {get;set;} 
		public Object sanity {get;set;} 
		public Object enemy_damage {get;set;} 
		public Object enemy_horror {get;set;} 
		public Object enemy_fight {get;set;} 
		public Object enemy_evade {get;set;} 
		public Integer victory {get;set;} 
		public Object vengeance {get;set;} 
		public Object deck_limit {get;set;} 
		public Object slot {get;set;} 
		public String real_slot {get;set;} 
		public Object stage {get;set;} 
		public String traits {get;set;} 
		public String real_traits {get;set;} 
		public Object deck_requirements {get;set;} 
		public Object deck_options {get;set;} 
		public Object restrictions {get;set;} 
		public String flavor {get;set;} 
		public String illustrator {get;set;} 
		public Boolean is_unique {get;set;} 
		public Boolean exile {get;set;} 
		public Boolean hidden {get;set;} 
		public Boolean permanent {get;set;} 
		public Boolean double_sided {get;set;} 
		public Object back_text {get;set;} 
		public Object back_flavor {get;set;} 
		public Object back_name {get;set;} 
		public String octgn_id {get;set;} 
		public String url {get;set;} 
		public String imagesrc {get;set;} 
		public Integer spoiler {get;set;} 

		public Linked_card_T(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'pack_code') {
							pack_code = parser.getText();
						} else if (text == 'pack_name') {
							pack_name = parser.getText();
						} else if (text == 'type_code') {
							type_code = parser.getText();
						} else if (text == 'type_name') {
							type_name = parser.getText();
						} else if (text == 'faction_code') {
							faction_code = parser.getText();
						} else if (text == 'faction_name') {
							faction_name = parser.getText();
						} else if (text == 'encounter_code') {
							encounter_code = parser.getText();
						} else if (text == 'encounter_name') {
							encounter_name = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'position') {
							position = parser.getIntegerValue();
						} else if (text == 'exceptional') {
							exceptional = parser.getBooleanValue();
						} else if (text == 'myriad') {
							myriad = parser.getBooleanValue();
						} else if (text == 'encounter_position') {
							encounter_position = parser.getIntegerValue();
						} else if (text == 'code') {
							code = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'real_name') {
							real_name = parser.getText();
						} else if (text == 'subname') {
							subname = parser.readValueAs(Object.class);
						} else if (text == 'bonded_to') {
							bonded_to = parser.readValueAs(Object.class);
						} else if (text == 'bonded_count') {
							bonded_count = parser.readValueAs(Object.class);
						} else if (text == 'cost') {
							cost = parser.readValueAs(Object.class);
						} else if (text == 'text') {
							text = parser.getText();
						} else if (text == 'real_text') {
							real_text = parser.getText();
						} else if (text == 'quantity') {
							quantity = parser.getIntegerValue();
						} else if (text == 'skill_willpower') {
							skill_willpower = parser.readValueAs(Object.class);
						} else if (text == 'skill_intellect') {
							skill_intellect = parser.readValueAs(Object.class);
						} else if (text == 'skill_combat') {
							skill_combat = parser.readValueAs(Object.class);
						} else if (text == 'skill_agility') {
							skill_agility = parser.readValueAs(Object.class);
						} else if (text == 'skill_wild') {
							skill_wild = parser.readValueAs(Object.class);
						} else if (text == 'xp') {
							xp = parser.readValueAs(Object.class);
						} else if (text == 'shroud') {
							shroud = parser.getIntegerValue();
						} else if (text == 'clues') {
							clues = parser.getIntegerValue();
						} else if (text == 'clues_fixed') {
							clues_fixed = parser.getBooleanValue();
						} else if (text == 'doom') {
							doom = parser.readValueAs(Object.class);
						} else if (text == 'health') {
							health = parser.readValueAs(Object.class);
						} else if (text == 'health_per_investigator') {
							health_per_investigator = parser.getBooleanValue();
						} else if (text == 'sanity') {
							sanity = parser.readValueAs(Object.class);
						} else if (text == 'enemy_damage') {
							enemy_damage = parser.readValueAs(Object.class);
						} else if (text == 'enemy_horror') {
							enemy_horror = parser.readValueAs(Object.class);
						} else if (text == 'enemy_fight') {
							enemy_fight = parser.readValueAs(Object.class);
						} else if (text == 'enemy_evade') {
							enemy_evade = parser.readValueAs(Object.class);
						} else if (text == 'victory') {
							victory = parser.getIntegerValue();
						} else if (text == 'vengeance') {
							vengeance = parser.readValueAs(Object.class);
						} else if (text == 'deck_limit') {
							deck_limit = parser.readValueAs(Object.class);
						} else if (text == 'slot') {
							slot = parser.readValueAs(Object.class);
						} else if (text == 'real_slot') {
							real_slot = parser.getText();
						} else if (text == 'stage') {
							stage = parser.readValueAs(Object.class);
						} else if (text == 'traits') {
							traits = parser.getText();
						} else if (text == 'real_traits') {
							real_traits = parser.getText();
						} else if (text == 'deck_requirements') {
							deck_requirements = parser.readValueAs(Object.class);
						} else if (text == 'deck_options') {
							deck_options = parser.readValueAs(Object.class);
						} else if (text == 'restrictions') {
							restrictions = parser.readValueAs(Object.class);
						} else if (text == 'flavor') {
							flavor = parser.getText();
						} else if (text == 'illustrator') {
							illustrator = parser.getText();
						} else if (text == 'is_unique') {
							is_unique = parser.getBooleanValue();
						} else if (text == 'exile') {
							exile = parser.getBooleanValue();
						} else if (text == 'hidden') {
							hidden = parser.getBooleanValue();
						} else if (text == 'permanent') {
							permanent = parser.getBooleanValue();
						} else if (text == 'double_sided') {
							double_sided = parser.getBooleanValue();
						} else if (text == 'back_text') {
							back_text = parser.readValueAs(Object.class);
						} else if (text == 'back_flavor') {
							back_flavor = parser.readValueAs(Object.class);
						} else if (text == 'back_name') {
							back_name = parser.readValueAs(Object.class);
						} else if (text == 'octgn_id') {
							octgn_id = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'imagesrc') {
							imagesrc = parser.getText();
						} else if (text == 'spoiler') {
							spoiler = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Linked_card_T consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 60403 {
		public String 60403 {get;set;} 

		public 60403(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60403') {
							60403 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '60403 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 60402 {
		public String 60402 {get;set;} 

		public 60402(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60402') {
							60402 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '60402 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Linked_card_X {
		public String pack_code {get;set;} 
		public String pack_name {get;set;} 
		public String type_code {get;set;} 
		public String type_name {get;set;} 
		public String faction_code {get;set;} 
		public String faction_name {get;set;} 
		public String encounter_code {get;set;} 
		public String encounter_name {get;set;} 
		public Integer id {get;set;} 
		public Integer position {get;set;} 
		public Boolean exceptional {get;set;} 
		public Boolean myriad {get;set;} 
		public Integer encounter_position {get;set;} 
		public String code {get;set;} 
		public String name {get;set;} 
		public String real_name {get;set;} 
		public Object subname {get;set;} 
		public Object bonded_to {get;set;} 
		public Object bonded_count {get;set;} 
		public Object cost {get;set;} 
		public String text {get;set;} 
		public String real_text {get;set;} 
		public Integer quantity {get;set;} 
		public Object skill_willpower {get;set;} 
		public Object skill_intellect {get;set;} 
		public Object skill_combat {get;set;} 
		public Object skill_agility {get;set;} 
		public Object skill_wild {get;set;} 
		public Object xp {get;set;} 
		public Integer shroud {get;set;} 
		public Integer clues {get;set;} 
		public Boolean clues_fixed {get;set;} 
		public Object doom {get;set;} 
		public Object health {get;set;} 
		public Boolean health_per_investigator {get;set;} 
		public Object sanity {get;set;} 
		public Object enemy_damage {get;set;} 
		public Object enemy_horror {get;set;} 
		public Object enemy_fight {get;set;} 
		public Object enemy_evade {get;set;} 
		public Object victory {get;set;} 
		public Object vengeance {get;set;} 
		public Object deck_limit {get;set;} 
		public Object slot {get;set;} 
		public String real_slot {get;set;} 
		public Object stage {get;set;} 
		public String traits {get;set;} 
		public String real_traits {get;set;} 
		public Object deck_requirements {get;set;} 
		public Object deck_options {get;set;} 
		public Object restrictions {get;set;} 
		public String flavor {get;set;} 
		public String illustrator {get;set;} 
		public Boolean is_unique {get;set;} 
		public Boolean exile {get;set;} 
		public Boolean hidden {get;set;} 
		public Boolean permanent {get;set;} 
		public Boolean double_sided {get;set;} 
		public Object back_text {get;set;} 
		public Object back_flavor {get;set;} 
		public Object back_name {get;set;} 
		public String octgn_id {get;set;} 
		public String url {get;set;} 
		public String imagesrc {get;set;} 
		public Integer spoiler {get;set;} 

		public Linked_card_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'pack_code') {
							pack_code = parser.getText();
						} else if (text == 'pack_name') {
							pack_name = parser.getText();
						} else if (text == 'type_code') {
							type_code = parser.getText();
						} else if (text == 'type_name') {
							type_name = parser.getText();
						} else if (text == 'faction_code') {
							faction_code = parser.getText();
						} else if (text == 'faction_name') {
							faction_name = parser.getText();
						} else if (text == 'encounter_code') {
							encounter_code = parser.getText();
						} else if (text == 'encounter_name') {
							encounter_name = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'position') {
							position = parser.getIntegerValue();
						} else if (text == 'exceptional') {
							exceptional = parser.getBooleanValue();
						} else if (text == 'myriad') {
							myriad = parser.getBooleanValue();
						} else if (text == 'encounter_position') {
							encounter_position = parser.getIntegerValue();
						} else if (text == 'code') {
							code = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'real_name') {
							real_name = parser.getText();
						} else if (text == 'subname') {
							subname = parser.readValueAs(Object.class);
						} else if (text == 'bonded_to') {
							bonded_to = parser.readValueAs(Object.class);
						} else if (text == 'bonded_count') {
							bonded_count = parser.readValueAs(Object.class);
						} else if (text == 'cost') {
							cost = parser.readValueAs(Object.class);
						} else if (text == 'text') {
							text = parser.getText();
						} else if (text == 'real_text') {
							real_text = parser.getText();
						} else if (text == 'quantity') {
							quantity = parser.getIntegerValue();
						} else if (text == 'skill_willpower') {
							skill_willpower = parser.readValueAs(Object.class);
						} else if (text == 'skill_intellect') {
							skill_intellect = parser.readValueAs(Object.class);
						} else if (text == 'skill_combat') {
							skill_combat = parser.readValueAs(Object.class);
						} else if (text == 'skill_agility') {
							skill_agility = parser.readValueAs(Object.class);
						} else if (text == 'skill_wild') {
							skill_wild = parser.readValueAs(Object.class);
						} else if (text == 'xp') {
							xp = parser.readValueAs(Object.class);
						} else if (text == 'shroud') {
							shroud = parser.getIntegerValue();
						} else if (text == 'clues') {
							clues = parser.getIntegerValue();
						} else if (text == 'clues_fixed') {
							clues_fixed = parser.getBooleanValue();
						} else if (text == 'doom') {
							doom = parser.readValueAs(Object.class);
						} else if (text == 'health') {
							health = parser.readValueAs(Object.class);
						} else if (text == 'health_per_investigator') {
							health_per_investigator = parser.getBooleanValue();
						} else if (text == 'sanity') {
							sanity = parser.readValueAs(Object.class);
						} else if (text == 'enemy_damage') {
							enemy_damage = parser.readValueAs(Object.class);
						} else if (text == 'enemy_horror') {
							enemy_horror = parser.readValueAs(Object.class);
						} else if (text == 'enemy_fight') {
							enemy_fight = parser.readValueAs(Object.class);
						} else if (text == 'enemy_evade') {
							enemy_evade = parser.readValueAs(Object.class);
						} else if (text == 'victory') {
							victory = parser.readValueAs(Object.class);
						} else if (text == 'vengeance') {
							vengeance = parser.readValueAs(Object.class);
						} else if (text == 'deck_limit') {
							deck_limit = parser.readValueAs(Object.class);
						} else if (text == 'slot') {
							slot = parser.readValueAs(Object.class);
						} else if (text == 'real_slot') {
							real_slot = parser.getText();
						} else if (text == 'stage') {
							stage = parser.readValueAs(Object.class);
						} else if (text == 'traits') {
							traits = parser.getText();
						} else if (text == 'real_traits') {
							real_traits = parser.getText();
						} else if (text == 'deck_requirements') {
							deck_requirements = parser.readValueAs(Object.class);
						} else if (text == 'deck_options') {
							deck_options = parser.readValueAs(Object.class);
						} else if (text == 'restrictions') {
							restrictions = parser.readValueAs(Object.class);
						} else if (text == 'flavor') {
							flavor = parser.getText();
						} else if (text == 'illustrator') {
							illustrator = parser.getText();
						} else if (text == 'is_unique') {
							is_unique = parser.getBooleanValue();
						} else if (text == 'exile') {
							exile = parser.getBooleanValue();
						} else if (text == 'hidden') {
							hidden = parser.getBooleanValue();
						} else if (text == 'permanent') {
							permanent = parser.getBooleanValue();
						} else if (text == 'double_sided') {
							double_sided = parser.getBooleanValue();
						} else if (text == 'back_text') {
							back_text = parser.readValueAs(Object.class);
						} else if (text == 'back_flavor') {
							back_flavor = parser.readValueAs(Object.class);
						} else if (text == 'back_name') {
							back_name = parser.readValueAs(Object.class);
						} else if (text == 'octgn_id') {
							octgn_id = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'imagesrc') {
							imagesrc = parser.getText();
						} else if (text == 'spoiler') {
							spoiler = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Linked_card_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Linked_card_W {
		public String pack_code {get;set;} 
		public String pack_name {get;set;} 
		public String type_code {get;set;} 
		public String type_name {get;set;} 
		public String faction_code {get;set;} 
		public String faction_name {get;set;} 
		public String encounter_code {get;set;} 
		public String encounter_name {get;set;} 
		public Integer id {get;set;} 
		public Integer position {get;set;} 
		public Boolean exceptional {get;set;} 
		public Boolean myriad {get;set;} 
		public Integer encounter_position {get;set;} 
		public String code {get;set;} 
		public String name {get;set;} 
		public String real_name {get;set;} 
		public Object subname {get;set;} 
		public Object bonded_to {get;set;} 
		public Object bonded_count {get;set;} 
		public Object cost {get;set;} 
		public String text {get;set;} 
		public String real_text {get;set;} 
		public Integer quantity {get;set;} 
		public Object skill_willpower {get;set;} 
		public Object skill_intellect {get;set;} 
		public Object skill_combat {get;set;} 
		public Object skill_agility {get;set;} 
		public Object skill_wild {get;set;} 
		public Object xp {get;set;} 
		public Integer shroud {get;set;} 
		public Integer clues {get;set;} 
		public Boolean clues_fixed {get;set;} 
		public Object doom {get;set;} 
		public Object health {get;set;} 
		public Boolean health_per_investigator {get;set;} 
		public Object sanity {get;set;} 
		public Object enemy_damage {get;set;} 
		public Object enemy_horror {get;set;} 
		public Object enemy_fight {get;set;} 
		public Object enemy_evade {get;set;} 
		public Object victory {get;set;} 
		public Object vengeance {get;set;} 
		public Object deck_limit {get;set;} 
		public Object slot {get;set;} 
		public String real_slot {get;set;} 
		public Object stage {get;set;} 
		public String traits {get;set;} 
		public String real_traits {get;set;} 
		public Object deck_requirements {get;set;} 
		public Object deck_options {get;set;} 
		public Object restrictions {get;set;} 
		public String flavor {get;set;} 
		public String illustrator {get;set;} 
		public Boolean is_unique {get;set;} 
		public Boolean exile {get;set;} 
		public Boolean hidden {get;set;} 
		public Boolean permanent {get;set;} 
		public Boolean double_sided {get;set;} 
		public Object back_text {get;set;} 
		public Object back_flavor {get;set;} 
		public Object back_name {get;set;} 
		public Object octgn_id {get;set;} 
		public String url {get;set;} 
		public String imagesrc {get;set;} 
		public Integer spoiler {get;set;} 

		public Linked_card_W(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'pack_code') {
							pack_code = parser.getText();
						} else if (text == 'pack_name') {
							pack_name = parser.getText();
						} else if (text == 'type_code') {
							type_code = parser.getText();
						} else if (text == 'type_name') {
							type_name = parser.getText();
						} else if (text == 'faction_code') {
							faction_code = parser.getText();
						} else if (text == 'faction_name') {
							faction_name = parser.getText();
						} else if (text == 'encounter_code') {
							encounter_code = parser.getText();
						} else if (text == 'encounter_name') {
							encounter_name = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'position') {
							position = parser.getIntegerValue();
						} else if (text == 'exceptional') {
							exceptional = parser.getBooleanValue();
						} else if (text == 'myriad') {
							myriad = parser.getBooleanValue();
						} else if (text == 'encounter_position') {
							encounter_position = parser.getIntegerValue();
						} else if (text == 'code') {
							code = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'real_name') {
							real_name = parser.getText();
						} else if (text == 'subname') {
							subname = parser.readValueAs(Object.class);
						} else if (text == 'bonded_to') {
							bonded_to = parser.readValueAs(Object.class);
						} else if (text == 'bonded_count') {
							bonded_count = parser.readValueAs(Object.class);
						} else if (text == 'cost') {
							cost = parser.readValueAs(Object.class);
						} else if (text == 'text') {
							text = parser.getText();
						} else if (text == 'real_text') {
							real_text = parser.getText();
						} else if (text == 'quantity') {
							quantity = parser.getIntegerValue();
						} else if (text == 'skill_willpower') {
							skill_willpower = parser.readValueAs(Object.class);
						} else if (text == 'skill_intellect') {
							skill_intellect = parser.readValueAs(Object.class);
						} else if (text == 'skill_combat') {
							skill_combat = parser.readValueAs(Object.class);
						} else if (text == 'skill_agility') {
							skill_agility = parser.readValueAs(Object.class);
						} else if (text == 'skill_wild') {
							skill_wild = parser.readValueAs(Object.class);
						} else if (text == 'xp') {
							xp = parser.readValueAs(Object.class);
						} else if (text == 'shroud') {
							shroud = parser.getIntegerValue();
						} else if (text == 'clues') {
							clues = parser.getIntegerValue();
						} else if (text == 'clues_fixed') {
							clues_fixed = parser.getBooleanValue();
						} else if (text == 'doom') {
							doom = parser.readValueAs(Object.class);
						} else if (text == 'health') {
							health = parser.readValueAs(Object.class);
						} else if (text == 'health_per_investigator') {
							health_per_investigator = parser.getBooleanValue();
						} else if (text == 'sanity') {
							sanity = parser.readValueAs(Object.class);
						} else if (text == 'enemy_damage') {
							enemy_damage = parser.readValueAs(Object.class);
						} else if (text == 'enemy_horror') {
							enemy_horror = parser.readValueAs(Object.class);
						} else if (text == 'enemy_fight') {
							enemy_fight = parser.readValueAs(Object.class);
						} else if (text == 'enemy_evade') {
							enemy_evade = parser.readValueAs(Object.class);
						} else if (text == 'victory') {
							victory = parser.readValueAs(Object.class);
						} else if (text == 'vengeance') {
							vengeance = parser.readValueAs(Object.class);
						} else if (text == 'deck_limit') {
							deck_limit = parser.readValueAs(Object.class);
						} else if (text == 'slot') {
							slot = parser.readValueAs(Object.class);
						} else if (text == 'real_slot') {
							real_slot = parser.getText();
						} else if (text == 'stage') {
							stage = parser.readValueAs(Object.class);
						} else if (text == 'traits') {
							traits = parser.getText();
						} else if (text == 'real_traits') {
							real_traits = parser.getText();
						} else if (text == 'deck_requirements') {
							deck_requirements = parser.readValueAs(Object.class);
						} else if (text == 'deck_options') {
							deck_options = parser.readValueAs(Object.class);
						} else if (text == 'restrictions') {
							restrictions = parser.readValueAs(Object.class);
						} else if (text == 'flavor') {
							flavor = parser.getText();
						} else if (text == 'illustrator') {
							illustrator = parser.getText();
						} else if (text == 'is_unique') {
							is_unique = parser.getBooleanValue();
						} else if (text == 'exile') {
							exile = parser.getBooleanValue();
						} else if (text == 'hidden') {
							hidden = parser.getBooleanValue();
						} else if (text == 'permanent') {
							permanent = parser.getBooleanValue();
						} else if (text == 'double_sided') {
							double_sided = parser.getBooleanValue();
						} else if (text == 'back_text') {
							back_text = parser.readValueAs(Object.class);
						} else if (text == 'back_flavor') {
							back_flavor = parser.readValueAs(Object.class);
						} else if (text == 'back_name') {
							back_name = parser.readValueAs(Object.class);
						} else if (text == 'octgn_id') {
							octgn_id = parser.readValueAs(Object.class);
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'imagesrc') {
							imagesrc = parser.getText();
						} else if (text == 'spoiler') {
							spoiler = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Linked_card_W consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Linked_card_V {
		public String pack_code {get;set;} 
		public String pack_name {get;set;} 
		public String type_code {get;set;} 
		public String type_name {get;set;} 
		public String faction_code {get;set;} 
		public String faction_name {get;set;} 
		public String encounter_code {get;set;} 
		public String encounter_name {get;set;} 
		public Integer id {get;set;} 
		public Integer position {get;set;} 
		public Boolean exceptional {get;set;} 
		public Boolean myriad {get;set;} 
		public Integer encounter_position {get;set;} 
		public String code {get;set;} 
		public String name {get;set;} 
		public String real_name {get;set;} 
		public String subname {get;set;} 
		public Object bonded_to {get;set;} 
		public Object bonded_count {get;set;} 
		public Object cost {get;set;} 
		public String text {get;set;} 
		public String real_text {get;set;} 
		public Integer quantity {get;set;} 
		public Object skill_willpower {get;set;} 
		public Object skill_intellect {get;set;} 
		public Object skill_combat {get;set;} 
		public Object skill_agility {get;set;} 
		public Object skill_wild {get;set;} 
		public Object xp {get;set;} 
		public Object shroud {get;set;} 
		public Object clues {get;set;} 
		public Boolean clues_fixed {get;set;} 
		public Object doom {get;set;} 
		public Integer health {get;set;} 
		public Boolean health_per_investigator {get;set;} 
		public Object sanity {get;set;} 
		public Integer enemy_damage {get;set;} 
		public Integer enemy_horror {get;set;} 
		public Integer enemy_fight {get;set;} 
		public Integer enemy_evade {get;set;} 
		public Integer victory {get;set;} 
		public Object vengeance {get;set;} 
		public Object deck_limit {get;set;} 
		public Object slot {get;set;} 
		public String real_slot {get;set;} 
		public Object stage {get;set;} 
		public String traits {get;set;} 
		public String real_traits {get;set;} 
		public Object deck_requirements {get;set;} 
		public Object deck_options {get;set;} 
		public Object restrictions {get;set;} 
		public String flavor {get;set;} 
		public String illustrator {get;set;} 
		public Boolean is_unique {get;set;} 
		public Boolean exile {get;set;} 
		public Boolean hidden {get;set;} 
		public Boolean permanent {get;set;} 
		public Boolean double_sided {get;set;} 
		public Object back_text {get;set;} 
		public Object back_flavor {get;set;} 
		public Object back_name {get;set;} 
		public String octgn_id {get;set;} 
		public String url {get;set;} 
		public String imagesrc {get;set;} 
		public Integer spoiler {get;set;} 

		public Linked_card_V(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'pack_code') {
							pack_code = parser.getText();
						} else if (text == 'pack_name') {
							pack_name = parser.getText();
						} else if (text == 'type_code') {
							type_code = parser.getText();
						} else if (text == 'type_name') {
							type_name = parser.getText();
						} else if (text == 'faction_code') {
							faction_code = parser.getText();
						} else if (text == 'faction_name') {
							faction_name = parser.getText();
						} else if (text == 'encounter_code') {
							encounter_code = parser.getText();
						} else if (text == 'encounter_name') {
							encounter_name = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'position') {
							position = parser.getIntegerValue();
						} else if (text == 'exceptional') {
							exceptional = parser.getBooleanValue();
						} else if (text == 'myriad') {
							myriad = parser.getBooleanValue();
						} else if (text == 'encounter_position') {
							encounter_position = parser.getIntegerValue();
						} else if (text == 'code') {
							code = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'real_name') {
							real_name = parser.getText();
						} else if (text == 'subname') {
							subname = parser.getText();
						} else if (text == 'bonded_to') {
							bonded_to = parser.readValueAs(Object.class);
						} else if (text == 'bonded_count') {
							bonded_count = parser.readValueAs(Object.class);
						} else if (text == 'cost') {
							cost = parser.readValueAs(Object.class);
						} else if (text == 'text') {
							text = parser.getText();
						} else if (text == 'real_text') {
							real_text = parser.getText();
						} else if (text == 'quantity') {
							quantity = parser.getIntegerValue();
						} else if (text == 'skill_willpower') {
							skill_willpower = parser.readValueAs(Object.class);
						} else if (text == 'skill_intellect') {
							skill_intellect = parser.readValueAs(Object.class);
						} else if (text == 'skill_combat') {
							skill_combat = parser.readValueAs(Object.class);
						} else if (text == 'skill_agility') {
							skill_agility = parser.readValueAs(Object.class);
						} else if (text == 'skill_wild') {
							skill_wild = parser.readValueAs(Object.class);
						} else if (text == 'xp') {
							xp = parser.readValueAs(Object.class);
						} else if (text == 'shroud') {
							shroud = parser.readValueAs(Object.class);
						} else if (text == 'clues') {
							clues = parser.readValueAs(Object.class);
						} else if (text == 'clues_fixed') {
							clues_fixed = parser.getBooleanValue();
						} else if (text == 'doom') {
							doom = parser.readValueAs(Object.class);
						} else if (text == 'health') {
							health = parser.getIntegerValue();
						} else if (text == 'health_per_investigator') {
							health_per_investigator = parser.getBooleanValue();
						} else if (text == 'sanity') {
							sanity = parser.readValueAs(Object.class);
						} else if (text == 'enemy_damage') {
							enemy_damage = parser.getIntegerValue();
						} else if (text == 'enemy_horror') {
							enemy_horror = parser.getIntegerValue();
						} else if (text == 'enemy_fight') {
							enemy_fight = parser.getIntegerValue();
						} else if (text == 'enemy_evade') {
							enemy_evade = parser.getIntegerValue();
						} else if (text == 'victory') {
							victory = parser.getIntegerValue();
						} else if (text == 'vengeance') {
							vengeance = parser.readValueAs(Object.class);
						} else if (text == 'deck_limit') {
							deck_limit = parser.readValueAs(Object.class);
						} else if (text == 'slot') {
							slot = parser.readValueAs(Object.class);
						} else if (text == 'real_slot') {
							real_slot = parser.getText();
						} else if (text == 'stage') {
							stage = parser.readValueAs(Object.class);
						} else if (text == 'traits') {
							traits = parser.getText();
						} else if (text == 'real_traits') {
							real_traits = parser.getText();
						} else if (text == 'deck_requirements') {
							deck_requirements = parser.readValueAs(Object.class);
						} else if (text == 'deck_options') {
							deck_options = parser.readValueAs(Object.class);
						} else if (text == 'restrictions') {
							restrictions = parser.readValueAs(Object.class);
						} else if (text == 'flavor') {
							flavor = parser.getText();
						} else if (text == 'illustrator') {
							illustrator = parser.getText();
						} else if (text == 'is_unique') {
							is_unique = parser.getBooleanValue();
						} else if (text == 'exile') {
							exile = parser.getBooleanValue();
						} else if (text == 'hidden') {
							hidden = parser.getBooleanValue();
						} else if (text == 'permanent') {
							permanent = parser.getBooleanValue();
						} else if (text == 'double_sided') {
							double_sided = parser.getBooleanValue();
						} else if (text == 'back_text') {
							back_text = parser.readValueAs(Object.class);
						} else if (text == 'back_flavor') {
							back_flavor = parser.readValueAs(Object.class);
						} else if (text == 'back_name') {
							back_name = parser.readValueAs(Object.class);
						} else if (text == 'octgn_id') {
							octgn_id = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'imagesrc') {
							imagesrc = parser.getText();
						} else if (text == 'spoiler') {
							spoiler = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Linked_card_V consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Linked_card_U {
		public String pack_code {get;set;} 
		public String pack_name {get;set;} 
		public String type_code {get;set;} 
		public String type_name {get;set;} 
		public String faction_code {get;set;} 
		public String faction_name {get;set;} 
		public Integer id {get;set;} 
		public Integer position {get;set;} 
		public Boolean exceptional {get;set;} 
		public Boolean myriad {get;set;} 
		public Object encounter_position {get;set;} 
		public String code {get;set;} 
		public String name {get;set;} 
		public String real_name {get;set;} 
		public String subname {get;set;} 
		public String bonded_to {get;set;} 
		public Integer bonded_count {get;set;} 
		public Object cost {get;set;} 
		public String text {get;set;} 
		public String real_text {get;set;} 
		public Integer quantity {get;set;} 
		public Object skill_willpower {get;set;} 
		public Object skill_intellect {get;set;} 
		public Object skill_combat {get;set;} 
		public Object skill_agility {get;set;} 
		public Object skill_wild {get;set;} 
		public Object xp {get;set;} 
		public Integer shroud {get;set;} 
		public Integer clues {get;set;} 
		public Boolean clues_fixed {get;set;} 
		public Object doom {get;set;} 
		public Object health {get;set;} 
		public Boolean health_per_investigator {get;set;} 
		public Object sanity {get;set;} 
		public Object enemy_damage {get;set;} 
		public Object enemy_horror {get;set;} 
		public Object enemy_fight {get;set;} 
		public Object enemy_evade {get;set;} 
		public Object victory {get;set;} 
		public Object vengeance {get;set;} 
		public Object deck_limit {get;set;} 
		public Object slot {get;set;} 
		public String real_slot {get;set;} 
		public Object stage {get;set;} 
		public String traits {get;set;} 
		public String real_traits {get;set;} 
		public Object deck_requirements {get;set;} 
		public Object deck_options {get;set;} 
		public Object restrictions {get;set;} 
		public String flavor {get;set;} 
		public String illustrator {get;set;} 
		public Boolean is_unique {get;set;} 
		public Boolean exile {get;set;} 
		public Boolean hidden {get;set;} 
		public Boolean permanent {get;set;} 
		public Boolean double_sided {get;set;} 
		public Object back_text {get;set;} 
		public Object back_flavor {get;set;} 
		public Object back_name {get;set;} 
		public Object octgn_id {get;set;} 
		public String url {get;set;} 
		public String imagesrc {get;set;} 
		public List<Faction> bonded_cards {get;set;} 

		public Linked_card_U(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'pack_code') {
							pack_code = parser.getText();
						} else if (text == 'pack_name') {
							pack_name = parser.getText();
						} else if (text == 'type_code') {
							type_code = parser.getText();
						} else if (text == 'type_name') {
							type_name = parser.getText();
						} else if (text == 'faction_code') {
							faction_code = parser.getText();
						} else if (text == 'faction_name') {
							faction_name = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'position') {
							position = parser.getIntegerValue();
						} else if (text == 'exceptional') {
							exceptional = parser.getBooleanValue();
						} else if (text == 'myriad') {
							myriad = parser.getBooleanValue();
						} else if (text == 'encounter_position') {
							encounter_position = parser.readValueAs(Object.class);
						} else if (text == 'code') {
							code = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'real_name') {
							real_name = parser.getText();
						} else if (text == 'subname') {
							subname = parser.getText();
						} else if (text == 'bonded_to') {
							bonded_to = parser.getText();
						} else if (text == 'bonded_count') {
							bonded_count = parser.getIntegerValue();
						} else if (text == 'cost') {
							cost = parser.readValueAs(Object.class);
						} else if (text == 'text') {
							text = parser.getText();
						} else if (text == 'real_text') {
							real_text = parser.getText();
						} else if (text == 'quantity') {
							quantity = parser.getIntegerValue();
						} else if (text == 'skill_willpower') {
							skill_willpower = parser.readValueAs(Object.class);
						} else if (text == 'skill_intellect') {
							skill_intellect = parser.readValueAs(Object.class);
						} else if (text == 'skill_combat') {
							skill_combat = parser.readValueAs(Object.class);
						} else if (text == 'skill_agility') {
							skill_agility = parser.readValueAs(Object.class);
						} else if (text == 'skill_wild') {
							skill_wild = parser.readValueAs(Object.class);
						} else if (text == 'xp') {
							xp = parser.readValueAs(Object.class);
						} else if (text == 'shroud') {
							shroud = parser.getIntegerValue();
						} else if (text == 'clues') {
							clues = parser.getIntegerValue();
						} else if (text == 'clues_fixed') {
							clues_fixed = parser.getBooleanValue();
						} else if (text == 'doom') {
							doom = parser.readValueAs(Object.class);
						} else if (text == 'health') {
							health = parser.readValueAs(Object.class);
						} else if (text == 'health_per_investigator') {
							health_per_investigator = parser.getBooleanValue();
						} else if (text == 'sanity') {
							sanity = parser.readValueAs(Object.class);
						} else if (text == 'enemy_damage') {
							enemy_damage = parser.readValueAs(Object.class);
						} else if (text == 'enemy_horror') {
							enemy_horror = parser.readValueAs(Object.class);
						} else if (text == 'enemy_fight') {
							enemy_fight = parser.readValueAs(Object.class);
						} else if (text == 'enemy_evade') {
							enemy_evade = parser.readValueAs(Object.class);
						} else if (text == 'victory') {
							victory = parser.readValueAs(Object.class);
						} else if (text == 'vengeance') {
							vengeance = parser.readValueAs(Object.class);
						} else if (text == 'deck_limit') {
							deck_limit = parser.readValueAs(Object.class);
						} else if (text == 'slot') {
							slot = parser.readValueAs(Object.class);
						} else if (text == 'real_slot') {
							real_slot = parser.getText();
						} else if (text == 'stage') {
							stage = parser.readValueAs(Object.class);
						} else if (text == 'traits') {
							traits = parser.getText();
						} else if (text == 'real_traits') {
							real_traits = parser.getText();
						} else if (text == 'deck_requirements') {
							deck_requirements = parser.readValueAs(Object.class);
						} else if (text == 'deck_options') {
							deck_options = parser.readValueAs(Object.class);
						} else if (text == 'restrictions') {
							restrictions = parser.readValueAs(Object.class);
						} else if (text == 'flavor') {
							flavor = parser.getText();
						} else if (text == 'illustrator') {
							illustrator = parser.getText();
						} else if (text == 'is_unique') {
							is_unique = parser.getBooleanValue();
						} else if (text == 'exile') {
							exile = parser.getBooleanValue();
						} else if (text == 'hidden') {
							hidden = parser.getBooleanValue();
						} else if (text == 'permanent') {
							permanent = parser.getBooleanValue();
						} else if (text == 'double_sided') {
							double_sided = parser.getBooleanValue();
						} else if (text == 'back_text') {
							back_text = parser.readValueAs(Object.class);
						} else if (text == 'back_flavor') {
							back_flavor = parser.readValueAs(Object.class);
						} else if (text == 'back_name') {
							back_name = parser.readValueAs(Object.class);
						} else if (text == 'octgn_id') {
							octgn_id = parser.readValueAs(Object.class);
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'imagesrc') {
							imagesrc = parser.getText();
						} else if (text == 'bonded_cards') {
							bonded_cards = arrayOfFaction(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Linked_card_U consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Level {
		public Integer min {get;set;} 
		public Integer max {get;set;} 

		public Level(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'min') {
							min = parser.getIntegerValue();
						} else if (text == 'max') {
							max = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Level consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AI {
		public Integer size {get;set;} 
		public Card_AI card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AI(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AI(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AI consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AH {
		public Integer size {get;set;} 
		public Card_AH card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AH(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AH(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AH consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AK {
		public Integer size {get;set;} 
		public Card_AK card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AK(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AK(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AK consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AJ {
		public Integer size {get;set;} 
		public Card_AJ card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AJ(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AJ(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AJ consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AM {
		public Integer size {get;set;} 
		public Card_AM card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AM(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AM(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AM consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AL {
		public Integer size {get;set;} 
		public Card_AL card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AL(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AL(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AL consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AO {
		public Integer size {get;set;} 
		public Card_AO card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AO(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AO(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AO consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AN {
		public Integer size {get;set;} 
		public Card_AN card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AN(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AN(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AN consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AQ {
		public Integer size {get;set;} 
		public Card_AQ card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AQ(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AQ(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AQ consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AP {
		public Integer size {get;set;} 
		public Card_AP card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AP(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AP(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AP consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AS {
		public Integer size {get;set;} 
		public Card_AS card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AS(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AS(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AS consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AR {
		public Integer size {get;set;} 
		public Card_AR card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AR(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AR(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AR consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AU {
		public Integer size {get;set;} 
		public Card_AU card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AU(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AU(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AU consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AT {
		public Integer size {get;set;} 
		public Card_AT card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AT(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AT(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AT consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AW {
		public Integer size {get;set;} 
		public Card_AW card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AW(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AW(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AW consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AV {
		public Integer size {get;set;} 
		public Card_AV card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AV(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AV(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AV consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AY {
		public Integer size {get;set;} 
		public Card_AY card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AY(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AY(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AY consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AX {
		public Integer size {get;set;} 
		public Card_AX card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AX(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AX(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AX consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_requirements_AZ {
		public Integer size {get;set;} 
		public Card_AZ card {get;set;} 
		public List<Random> random {get;set;} 

		public Deck_requirements_AZ(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'card') {
							card = new Card_AZ(parser);
						} else if (text == 'random') {
							random = arrayOfRandom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_requirements_AZ consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Bonded_cards {
		public Integer count {get;set;} 
		public String code {get;set;} 

		public Bonded_cards(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'count') {
							count = parser.getIntegerValue();
						} else if (text == 'code') {
							code = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Bonded_cards consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String pack_code {get;set;} 
	public String pack_name {get;set;} 
	public String type_code {get;set;} 
	public String type_name {get;set;} 
	public String subtype_code {get;set;} 
	public String subtype_name {get;set;} 
	public String faction_code {get;set;} 
	public String faction_name {get;set;} 
	public Integer position {get;set;} 
	public Boolean exceptional {get;set;} 
	public Boolean myriad {get;set;} 
	public String code {get;set;} 
	public String name {get;set;} 
	public String real_name {get;set;} 
	public String text {get;set;} 
	public String real_text {get;set;} 
	public Integer quantity {get;set;} 
	public Boolean clues_fixed {get;set;} 
	public Boolean health_per_investigator {get;set;} 
	public Integer deck_limit {get;set;} 
	public String real_slot {get;set;} 
	public String traits {get;set;} 
	public String real_traits {get;set;} 
	public Boolean is_unique {get;set;} 
	public Boolean exile {get;set;} 
	public Boolean hidden {get;set;} 
	public Boolean permanent {get;set;} 
	public Boolean double_sided {get;set;} 
	public String url {get;set;} 
	public String subname {get;set;} 
	public Integer skill_willpower {get;set;} 
	public Integer skill_intellect {get;set;} 
	public Integer skill_combat {get;set;} 
	public Integer skill_agility {get;set;} 
	public Integer health {get;set;} 
	public Integer sanity {get;set;} 
	public Deck_requirements deck_requirements {get;set;} 
	public List<Deck_options> deck_options {get;set;} 
	public String flavor {get;set;} 
	public String illustrator {get;set;} 
	public String back_text {get;set;} 
	public String back_flavor {get;set;} 
	public String octgn_id {get;set;} 
	public String imagesrc {get;set;} 
	public String backimagesrc {get;set;} 
	public Integer cost {get;set;} 
	public Integer skill_wild {get;set;} 
	public String slot {get;set;} 
	public Restrictions restrictions {get;set;} 
	public Integer xp {get;set;} 
	public List<String> duplicated_by {get;set;} 
	public Integer enemy_damage {get;set;} 
	public Integer enemy_horror {get;set;} 
	public Integer enemy_fight {get;set;} 
	public Integer enemy_evade {get;set;} 
	public Integer victory {get;set;} 
	public String linked_to_code {get;set;} 
	public String linked_to_name {get;set;} 
	public Linked_card linked_card {get;set;} 
	public String faction2_code {get;set;} 
	public String faction2_name {get;set;} 
	public List<Bonded_cards> bonded_cards {get;set;} 
	public String bonded_to {get;set;} 
	public Integer bonded_count {get;set;} 
	public Integer shroud {get;set;} 
	public Integer clues {get;set;} 
	public String duplicate_of_code {get;set;} 
	public String duplicate_of_name {get;set;} 
	public String alternate_of_code {get;set;} 
	public String alternate_of_name {get;set;} 

	public AllAHCards(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'pack_code') {
						pack_code = parser.getText();
					} else if (text == 'pack_name') {
						pack_name = parser.getText();
					} else if (text == 'type_code') {
						type_code = parser.getText();
					} else if (text == 'type_name') {
						type_name = parser.getText();
					} else if (text == 'subtype_code') {
						subtype_code = parser.getText();
					} else if (text == 'subtype_name') {
						subtype_name = parser.getText();
					} else if (text == 'faction_code') {
						faction_code = parser.getText();
					} else if (text == 'faction_name') {
						faction_name = parser.getText();
					} else if (text == 'position') {
						position = parser.getIntegerValue();
					} else if (text == 'exceptional') {
						exceptional = parser.getBooleanValue();
					} else if (text == 'myriad') {
						myriad = parser.getBooleanValue();
					} else if (text == 'code') {
						code = parser.getText();
					} else if (text == 'name') {
						name = parser.getText();
					} else if (text == 'real_name') {
						real_name = parser.getText();
					} else if (text == 'text') {
						text = parser.getText();
					} else if (text == 'real_text') {
						real_text = parser.getText();
					} else if (text == 'quantity') {
						quantity = parser.getIntegerValue();
					} else if (text == 'clues_fixed') {
						clues_fixed = parser.getBooleanValue();
					} else if (text == 'health_per_investigator') {
						health_per_investigator = parser.getBooleanValue();
					} else if (text == 'deck_limit') {
						deck_limit = parser.getIntegerValue();
					} else if (text == 'real_slot') {
						real_slot = parser.getText();
					} else if (text == 'traits') {
						traits = parser.getText();
					} else if (text == 'real_traits') {
						real_traits = parser.getText();
					} else if (text == 'is_unique') {
						is_unique = parser.getBooleanValue();
					} else if (text == 'exile') {
						exile = parser.getBooleanValue();
					} else if (text == 'hidden') {
						hidden = parser.getBooleanValue();
					} else if (text == 'permanent') {
						permanent = parser.getBooleanValue();
					} else if (text == 'double_sided') {
						double_sided = parser.getBooleanValue();
					} else if (text == 'url') {
						url = parser.getText();
					} else if (text == 'subname') {
						subname = parser.getText();
					} else if (text == 'skill_willpower') {
						skill_willpower = parser.getIntegerValue();
					} else if (text == 'skill_intellect') {
						skill_intellect = parser.getIntegerValue();
					} else if (text == 'skill_combat') {
						skill_combat = parser.getIntegerValue();
					} else if (text == 'skill_agility') {
						skill_agility = parser.getIntegerValue();
					} else if (text == 'health') {
						health = parser.getIntegerValue();
					} else if (text == 'sanity') {
						sanity = parser.getIntegerValue();
					} else if (text == 'deck_requirements') {
						deck_requirements = new Deck_requirements(parser);
					} else if (text == 'deck_options') {
						deck_options = arrayOfDeck_options(parser);
					} else if (text == 'flavor') {
						flavor = parser.getText();
					} else if (text == 'illustrator') {
						illustrator = parser.getText();
					} else if (text == 'back_text') {
						back_text = parser.getText();
					} else if (text == 'back_flavor') {
						back_flavor = parser.getText();
					} else if (text == 'octgn_id') {
						octgn_id = parser.getText();
					} else if (text == 'imagesrc') {
						imagesrc = parser.getText();
					} else if (text == 'backimagesrc') {
						backimagesrc = parser.getText();
					} else if (text == 'cost') {
						cost = parser.getIntegerValue();
					} else if (text == 'skill_wild') {
						skill_wild = parser.getIntegerValue();
					} else if (text == 'slot') {
						slot = parser.getText();
					} else if (text == 'restrictions') {
						restrictions = new Restrictions(parser);
					} else if (text == 'xp') {
						xp = parser.getIntegerValue();
					} else if (text == 'duplicated_by') {
						duplicated_by = arrayOfString(parser);
					} else if (text == 'enemy_damage') {
						enemy_damage = parser.getIntegerValue();
					} else if (text == 'enemy_horror') {
						enemy_horror = parser.getIntegerValue();
					} else if (text == 'enemy_fight') {
						enemy_fight = parser.getIntegerValue();
					} else if (text == 'enemy_evade') {
						enemy_evade = parser.getIntegerValue();
					} else if (text == 'victory') {
						victory = parser.getIntegerValue();
					} else if (text == 'linked_to_code') {
						linked_to_code = parser.getText();
					} else if (text == 'linked_to_name') {
						linked_to_name = parser.getText();
					} else if (text == 'linked_card') {
						linked_card = new Linked_card(parser);
					} else if (text == 'faction2_code') {
						faction2_code = parser.getText();
					} else if (text == 'faction2_name') {
						faction2_name = parser.getText();
					} else if (text == 'bonded_cards') {
						bonded_cards = arrayOfBonded_cards(parser);
					} else if (text == 'bonded_to') {
						bonded_to = parser.getText();
					} else if (text == 'bonded_count') {
						bonded_count = parser.getIntegerValue();
					} else if (text == 'shroud') {
						shroud = parser.getIntegerValue();
					} else if (text == 'clues') {
						clues = parser.getIntegerValue();
					} else if (text == 'duplicate_of_code') {
						duplicate_of_code = parser.getText();
					} else if (text == 'duplicate_of_name') {
						duplicate_of_name = parser.getText();
					} else if (text == 'alternate_of_code') {
						alternate_of_code = parser.getText();
					} else if (text == 'alternate_of_name') {
						alternate_of_name = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'AllAHCards consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class 04015 {
		public String 04015 {get;set;} 

		public 04015(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04015') {
							04015 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '04015 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 04016 {
		public String 04016 {get;set;} 

		public 04016(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04016') {
							04016 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '04016 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 04011 {
		public String 04011 {get;set;} 

		public 04011(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04011') {
							04011 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '04011 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 04012 {
		public String 04012 {get;set;} 

		public 04012(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04012') {
							04012 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '04012 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 04013 {
		public String 04013 {get;set;} 

		public 04013(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04013') {
							04013 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '04013 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 01007_Z {
		public String 01007 {get;set;} 

		public 01007_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01007') {
							01007 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '01007_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 04014 {
		public String 04014 {get;set;} 

		public 04014(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04014') {
							04014 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '04014 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 60303 {
		public String 60303 {get;set;} 

		public 60303(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60303') {
							60303 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '60303 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 60302 {
		public String 60302 {get;set;} 

		public 60302(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60302') {
							60302 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '60302 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 04010 {
		public String 04010 {get;set;} 

		public 04010(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04010') {
							04010 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '04010 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Atleast {
		public Integer factions {get;set;} 
		public Integer min {get;set;} 

		public Atleast(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'factions') {
							factions = parser.getIntegerValue();
						} else if (text == 'min') {
							min = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Atleast consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_L {
		public Investigator_L investigator {get;set;} 

		public Restrictions_L(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_L(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_L consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_M {
		public Investigator_M investigator {get;set;} 

		public Restrictions_M(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_M(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_M consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_N {
		public Investigator_N investigator {get;set;} 

		public Restrictions_N(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_N(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_N consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_O {
		public Investigator_O investigator {get;set;} 

		public Restrictions_O(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_O(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_O consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_H {
		public Investigator_H investigator {get;set;} 

		public Restrictions_H(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_H(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_H consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AZ {
		public Investigator_AZ investigator {get;set;} 

		public Restrictions_AZ(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AZ(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AZ consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 98008 {
		public String 98008 {get;set;} 

		public 98008(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '98008') {
							98008 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '98008 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_I {
		public Investigator_I investigator {get;set;} 

		public Restrictions_I(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_I(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_I consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AY {
		public Investigator_AY investigator {get;set;} 

		public Restrictions_AY(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AY(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AY consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_J {
		public Investigator_J investigator {get;set;} 

		public Restrictions_J(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_J(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_J consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_K {
		public Investigator_K investigator {get;set;} 

		public Restrictions_K(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_K(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_K consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 98009 {
		public String 98009 {get;set;} 

		public 98009(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '98009') {
							98009 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '98009 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_T {
		public Investigator_T investigator {get;set;} 

		public Restrictions_T(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_T(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_T consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_U {
		public Investigator_U investigator {get;set;} 

		public Restrictions_U(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_U(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_U consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_A {
		public String 05006 {get;set;} 

		public Investigator_A(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05006') {
							05006 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_A consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_V {
		public Investigator_V investigator {get;set;} 

		public Restrictions_V(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_V(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_V consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_W {
		public Investigator_W investigator {get;set;} 

		public Restrictions_W(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_W(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_W consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_P {
		public Investigator_P investigator {get;set;} 

		public Restrictions_P(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_P(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_P consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_D {
		public String 05003 {get;set;} 

		public Investigator_D(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05003') {
							05003 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_D consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_Q {
		public Investigator_Q investigator {get;set;} 

		public Restrictions_Q(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_Q(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_Q consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_E {
		public String 05002 {get;set;} 

		public Investigator_E(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05002') {
							05002 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_E consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator {
		public String 01001 {get;set;} 

		public Investigator(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01001') {
							01001 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_R {
		public Investigator_R investigator {get;set;} 

		public Restrictions_R(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_R(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_R consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_B {
		public String 05005 {get;set;} 

		public Investigator_B(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05005') {
							05005 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_B consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_S {
		public Investigator_S investigator {get;set;} 

		public Restrictions_S(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_S(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_S consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_C {
		public String 05004 {get;set;} 

		public Investigator_C(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05004') {
							05004 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_C consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_H {
		public String 04004 {get;set;} 

		public Investigator_H(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04004') {
							04004 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_H consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AN {
		public Investigator_AN investigator {get;set;} 

		public Restrictions_AN(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AN(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AN consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_I {
		public String 04003 {get;set;} 

		public Investigator_I(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04003') {
							04003 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_I consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AM {
		public Investigator_AM investigator {get;set;} 

		public Restrictions_AM(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AM(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AM consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_F {
		public String 05001 {get;set;} 
		public String 98010 {get;set;} 

		public Investigator_F(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '05001') {
							05001 = parser.getText();
						} else if (text == '98010') {
							98010 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_F consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AP {
		public Investigator_AP investigator {get;set;} 

		public Restrictions_AP(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AP(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AP consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_G {
		public String 04005 {get;set;} 

		public Investigator_G(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04005') {
							04005 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_G consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AO {
		public Investigator_AO investigator {get;set;} 

		public Restrictions_AO(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AO(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AO consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Random {
		public String target {get;set;} 
		public String value {get;set;} 

		public Random(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'target') {
							target = parser.getText();
						} else if (text == 'value') {
							value = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Random consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_L {
		public String 03006 {get;set;} 

		public Investigator_L(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03006') {
							03006 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_L consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AZ {
		public 06006 06006 {get;set;} 
		public 06007 06007 {get;set;} 

		public Card_AZ(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06006') {
							06006 = new 06006(parser);
						} else if (text == '06007') {
							06007 = new 06007(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AZ consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AJ {
		public Investigator_AJ investigator {get;set;} 

		public Restrictions_AJ(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AJ(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AJ consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_M {
		public String 03005 {get;set;} 

		public Investigator_M(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03005') {
							03005 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_M consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AI {
		public Investigator_AI investigator {get;set;} 

		public Restrictions_AI(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AI(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AI consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_J {
		public String 04002 {get;set;} 

		public Investigator_J(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04002') {
							04002 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_J consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AL {
		public Investigator_AL investigator {get;set;} 

		public Restrictions_AL(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AL(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AL consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_K {
		public String 04001 {get;set;} 

		public Investigator_K(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '04001') {
							04001 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_K consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AK {
		public Investigator_AK investigator {get;set;} 

		public Restrictions_AK(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AK(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AK consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_P {
		public String 03002 {get;set;} 

		public Investigator_P(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03002') {
							03002 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_P consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_D {
		public Investigator_D investigator {get;set;} 

		public Restrictions_D(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_D(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_D consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AV {
		public 06016 06016 {get;set;} 
		public 06017 06017 {get;set;} 

		public Card_AV(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06016') {
							06016 = new 06016(parser);
						} else if (text == '06017') {
							06017 = new 06017(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AV consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AV {
		public Investigator_AV investigator {get;set;} 

		public Restrictions_AV(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AV(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AV consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_Q {
		public String 03001 {get;set;} 

		public Investigator_Q(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03001') {
							03001 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_Q consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_E {
		public Investigator_E investigator {get;set;} 

		public Restrictions_E(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_E(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_E consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AW {
		public 06013 06013 {get;set;} 
		public 06014 06014 {get;set;} 

		public Card_AW(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06013') {
							06013 = new 06013(parser);
						} else if (text == '06014') {
							06014 = new 06014(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AW consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AU {
		public Investigator_AU investigator {get;set;} 

		public Restrictions_AU(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AU(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AU consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_N {
		public String 03004 {get;set;} 

		public Investigator_N(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03004') {
							03004 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_N consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_F {
		public Investigator_F investigator {get;set;} 

		public Restrictions_F(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_F(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_F consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AX {
		public 06010 06010 {get;set;} 
		public 06011 06011 {get;set;} 
		public 06012 06012 {get;set;} 

		public Card_AX(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06010') {
							06010 = new 06010(parser);
						} else if (text == '06011') {
							06011 = new 06011(parser);
						} else if (text == '06012') {
							06012 = new 06012(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AX consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AX {
		public Investigator_AX investigator {get;set;} 

		public Restrictions_AX(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AX(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AX consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_O {
		public String 03003 {get;set;} 

		public Investigator_O(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03003') {
							03003 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_O consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_G {
		public Investigator_G investigator {get;set;} 

		public Restrictions_G(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_G(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_G consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AY {
		public 06008 06008 {get;set;} 
		public 06009 06009 {get;set;} 

		public Card_AY(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06008') {
							06008 = new 06008(parser);
						} else if (text == '06009') {
							06009 = new 06009(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AY consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AW {
		public Investigator_AW investigator {get;set;} 

		public Restrictions_AW(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AW(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AW consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_T {
		public String 02003 {get;set;} 

		public Investigator_T(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02003') {
							02003 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_T consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AR {
		public 07012 07012 {get;set;} 
		public 07013 07013 {get;set;} 

		public Card_AR(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07012') {
							07012 = new 07012(parser);
						} else if (text == '07013') {
							07013 = new 07013(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AR consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AR {
		public Investigator_AR investigator {get;set;} 

		public Restrictions_AR(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AR(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AR consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_U {
		public String 02002 {get;set;} 

		public Investigator_U(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02002') {
							02002 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_U consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_A {
		public Investigator_A investigator {get;set;} 

		public Restrictions_A(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_A(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_A consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AS {
		public 07010 07010 {get;set;} 
		public 07011 07011 {get;set;} 

		public Card_AS(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07010') {
							07010 = new 07010(parser);
						} else if (text == '07011') {
							07011 = new 07011(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AS consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AQ {
		public Investigator_AQ investigator {get;set;} 

		public Restrictions_AQ(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AQ(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AQ consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_R {
		public String 02005 {get;set;} 

		public Investigator_R(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02005') {
							02005 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_R consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_B {
		public Investigator_B investigator {get;set;} 

		public Restrictions_B(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_B(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_B consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AT {
		public 07008 07008 {get;set;} 
		public 07009 07009 {get;set;} 

		public Card_AT(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07008') {
							07008 = new 07008(parser);
						} else if (text == '07009') {
							07009 = new 07009(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AT consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AT {
		public Investigator_AT investigator {get;set;} 

		public Restrictions_AT(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AT(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AT consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_S {
		public String 02004 {get;set;} 

		public Investigator_S(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02004') {
							02004 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_S consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_C {
		public Investigator_C investigator {get;set;} 

		public Restrictions_C(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_C(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_C consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AU {
		public 07006 07006 {get;set;} 
		public 07007 07007 {get;set;} 

		public Card_AU(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07006') {
							07006 = new 07006(parser);
						} else if (text == '07007') {
							07007 = new 07007(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AU consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AS {
		public Investigator_AS investigator {get;set;} 

		public Restrictions_AS(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AS(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AS consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_X {
		public String 01004 {get;set;} 

		public Investigator_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01004') {
							01004 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AN {
		public 60302 60302 {get;set;} 
		public 60303 60303 {get;set;} 

		public Card_AN(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60302') {
							60302 = new 60302(parser);
						} else if (text == '60303') {
							60303 = new 60303(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AN consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_Y {
		public String 01003 {get;set;} 

		public Investigator_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01003') {
							01003 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AO {
		public 60202 60202 {get;set;} 
		public 60203 60203 {get;set;} 

		public Card_AO(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60202') {
							60202 = new 60202(parser);
						} else if (text == '60203') {
							60203 = new 60203(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AO consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_V {
		public String 02001 {get;set;} 

		public Investigator_V(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02001') {
							02001 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_V consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AP {
		public 60102 60102 {get;set;} 
		public 60103 60103 {get;set;} 

		public Card_AP(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60102') {
							60102 = new 60102(parser);
						} else if (text == '60103') {
							60103 = new 60103(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AP consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_W {
		public String 01005 {get;set;} 

		public Investigator_W(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01005') {
							01005 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_W consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AQ {
		public 07014 07014 {get;set;} 
		public 07015 07015 {get;set;} 
		public 07016 07016 {get;set;} 

		public Card_AQ(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07014') {
							07014 = new 07014(parser);
						} else if (text == '07015') {
							07015 = new 07015(parser);
						} else if (text == '07016') {
							07016 = new 07016(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AQ consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AJ {
		public 98008 98008 {get;set;} 
		public 98009 98009 {get;set;} 

		public Card_AJ(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '98008') {
							98008 = new 98008(parser);
						} else if (text == '98009') {
							98009 = new 98009(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AJ consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AK {
		public 01006_Z 01006 {get;set;} 
		public 01007_Z 01007 {get;set;} 

		public Card_AK(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01006') {
							01006 = new 01006_Z(parser);
						} else if (text == '01007') {
							01007 = new 01007_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AK consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_Z {
		public String 01002 {get;set;} 

		public Investigator_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '01002') {
							01002 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AL {
		public 60502 60502 {get;set;} 
		public 60503 60503 {get;set;} 

		public Card_AL(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60502') {
							60502 = new 60502(parser);
						} else if (text == '60503') {
							60503 = new 60503(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AL consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AM {
		public 60402 60402 {get;set;} 
		public 60403 60403 {get;set;} 

		public Card_AM(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60402') {
							60402 = new 60402(parser);
						} else if (text == '60403') {
							60403 = new 60403(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AM consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 02015 {
		public String 02015 {get;set;} 

		public 02015(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02015') {
							02015 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '02015 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public List<String> trait {get;set;} 

		public Deck_options(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'trait') {
							trait = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 02014 {
		public String 02014 {get;set;} 

		public 02014(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02014') {
							02014 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '02014 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AH {
		public 99002 99002 {get;set;} 
		public 99003 99003 {get;set;} 

		public Card_AH(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '99002') {
							99002 = new 99002(parser);
						} else if (text == '99003') {
							99003 = new 99003(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AH consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_AH {
		public Investigator_AH investigator {get;set;} 

		public Restrictions_AH(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_AH(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_AH consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 02013 {
		public String 02013 {get;set;} 

		public 02013(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02013') {
							02013 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '02013 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card_AI {
		public 98020 98020 {get;set;} 
		public 98021 98021 {get;set;} 

		public Card_AI(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '98020') {
							98020 = new 98020(parser);
						} else if (text == '98021') {
							98021 = new 98021(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Card_AI consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_X {
		public Investigator_X investigator {get;set;} 

		public Restrictions_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_X(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 02012 {
		public String 02012 {get;set;} 

		public 02012(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02012') {
							02012 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '02012 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 60203 {
		public String 60203 {get;set;} 

		public 60203(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60203') {
							60203 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '60203 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_Y {
		public Investigator_Y investigator {get;set;} 

		public Restrictions_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_Y(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 02011 {
		public String 02011 {get;set;} 
		public String 98003 {get;set;} 

		public 02011(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02011') {
							02011 = parser.getText();
						} else if (text == '98003') {
							98003 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '02011 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 60202 {
		public String 60202 {get;set;} 

		public 60202(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60202') {
							60202 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '60202 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Restrictions_Z {
		public Investigator_Z investigator {get;set;} 

		public Restrictions_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'investigator') {
							investigator = new Investigator_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Restrictions_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 02010 {
		public String 02010 {get;set;} 
		public String 98002 {get;set;} 

		public 02010(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '02010') {
							02010 = parser.getText();
						} else if (text == '98002') {
							98002 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '02010 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 03018 {
		public String 03018 {get;set;} 

		public 03018(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03018') {
							03018 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '03018 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_D {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public Integer limit_Z {get;set;} // in json: limit
		public String error {get;set;} 

		public Deck_options_D(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'limit') {
							limit_Z = parser.getIntegerValue();
						} else if (text == 'error') {
							error = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_D consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 03019 {
		public String 03019 {get;set;} 

		public 03019(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03019') {
							03019 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '03019 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_C {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public String name {get;set;} 
		public List<String> faction_select {get;set;} 
		public List<String> type_Z {get;set;} // in json: type
		public Integer limit_Z {get;set;} // in json: limit

		public Deck_options_C(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'faction_select') {
							faction_select = arrayOfString(parser);
						} else if (text == 'type') {
							type_Z = arrayOfString(parser);
						} else if (text == 'limit') {
							limit_Z = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_C consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_F {
		public List<String> trait {get;set;} 
		public Level level {get;set;} 
		public List<String> faction {get;set;} 
		public Integer limit_Z {get;set;} // in json: limit
		public String error {get;set;} 

		public Deck_options_F(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'trait') {
							trait = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'limit') {
							limit_Z = parser.getIntegerValue();
						} else if (text == 'error') {
							error = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_F consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_E {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public Integer limit_Z {get;set;} // in json: limit
		public String error {get;set;} 

		public Deck_options_E(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'limit') {
							limit_Z = parser.getIntegerValue();
						} else if (text == 'error') {
							error = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_E consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 03014 {
		public String 03014 {get;set;} 

		public 03014(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03014') {
							03014 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '03014 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 03015 {
		public String 03015 {get;set;} 

		public 03015(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03015') {
							03015 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '03015 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 98021 {
		public String 98021 {get;set;} 

		public 98021(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '98021') {
							98021 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '98021 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 03016 {
		public String 03016 {get;set;} 

		public 03016(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03016') {
							03016 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '03016 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_B {
		public List<String> trait {get;set;} 
		public Level level {get;set;} 
		public List<String> faction {get;set;} 
		public Integer limit_Z {get;set;} // in json: limit

		public Deck_options_B(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'trait') {
							trait = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'limit') {
							limit_Z = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_B consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 03017 {
		public String 03017 {get;set;} 

		public 03017(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03017') {
							03017 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '03017 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 03010 {
		public String 03010 {get;set;} 

		public 03010(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03010') {
							03010 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '03010 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_L {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public String name {get;set;} 
		public List<String> faction_select {get;set;} 
		public List<String> type_Z {get;set;} // in json: type
		public Integer limit_Z {get;set;} // in json: limit

		public Deck_options_L(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'faction_select') {
							faction_select = arrayOfString(parser);
						} else if (text == 'type') {
							type_Z = arrayOfString(parser);
						} else if (text == 'limit') {
							limit_Z = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_L consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 03011 {
		public String 03011 {get;set;} 

		public 03011(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03011') {
							03011 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '03011 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_K {
		public String name {get;set;} 
		public List<String> deck_size_select {get;set;} 
		public List<Faction> faction {get;set;} 
		public Level level {get;set;} 
		public List<String> faction_select {get;set;} 
		public List<String> type_Z {get;set;} // in json: type
		public Integer limit_Z {get;set;} // in json: limit

		public Deck_options_K(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'deck_size_select') {
							deck_size_select = arrayOfString(parser);
						} else if (text == 'faction') {
							faction = arrayOfFaction(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'faction_select') {
							faction_select = arrayOfString(parser);
						} else if (text == 'type') {
							type_Z = arrayOfString(parser);
						} else if (text == 'limit') {
							limit_Z = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_K consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 03012 {
		public String 03012 {get;set;} 

		public 03012(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03012') {
							03012 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '03012 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_N {
		public Boolean not_Z {get;set;} // in json: not
		public List<String> trait {get;set;} 
		public List<String> faction {get;set;} 
		public Level level {get;set;} 

		public Deck_options_N(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'not') {
							not_Z = parser.getBooleanValue();
						} else if (text == 'trait') {
							trait = arrayOfString(parser);
						} else if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_N consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 98020 {
		public String 98020 {get;set;} 

		public 98020(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '98020') {
							98020 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '98020 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 03013 {
		public String 03013 {get;set;} 

		public 03013(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03013') {
							03013 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '03013 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_M {
		public List<String> trait {get;set;} 
		public Level level {get;set;} 
		public List<String> faction {get;set;} 

		public Deck_options_M(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'trait') {
							trait = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'faction') {
							faction = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_M consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_H {
		public Boolean not_Z {get;set;} // in json: not
		public List<String> slot {get;set;} 

		public Deck_options_H(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'not') {
							not_Z = parser.getBooleanValue();
						} else if (text == 'slot') {
							slot = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_H consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_G {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public List<String> trait {get;set;} 

		public Deck_options_G(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'trait') {
							trait = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_G consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_J {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public List<String> trait {get;set;} 
		public List<String> type_Z {get;set;} // in json: type

		public Deck_options_J(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'trait') {
							trait = arrayOfString(parser);
						} else if (text == 'type') {
							type_Z = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_J consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_I {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public List<String> trait {get;set;} 

		public Deck_options_I(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'trait') {
							trait = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_I consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_T {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public List<String> trait {get;set;} 

		public Deck_options_T(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'trait') {
							trait = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_T consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AJ {
		public String 07004 {get;set;} 
		public String 98016 {get;set;} 

		public Investigator_AJ(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07004') {
							07004 = parser.getText();
						} else if (text == '98016') {
							98016 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AJ consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_S {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public Atleast atleast {get;set;} 
		public String error {get;set;} 

		public Deck_options_S(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'atleast') {
							atleast = new Atleast(parser);
						} else if (text == 'error') {
							error = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_S consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AI {
		public String 98019 {get;set;} 

		public Investigator_AI(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '98019') {
							98019 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AI consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_V {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public List<String> trait {get;set;} 

		public Deck_options_V(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'trait') {
							trait = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_V consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AH {
		public String 99001 {get;set;} 

		public Investigator_AH(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '99001') {
							99001 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AH consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_U {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public List<String> uses {get;set;} 
		public List<String> trait {get;set;} 

		public Deck_options_U(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'uses') {
							uses = arrayOfString(parser);
						} else if (text == 'trait') {
							trait = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_U consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_P {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public List<String> trait {get;set;} 

		public Deck_options_P(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'trait') {
							trait = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_P consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_O {
		public Boolean not_Z {get;set;} // in json: not
		public List<String> trait {get;set;} 
		public Level level {get;set;} 
		public List<String> faction {get;set;} 
		public List<String> text {get;set;} 
		public Integer limit_Z {get;set;} // in json: limit
		public String error {get;set;} 

		public Deck_options_O(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'not') {
							not_Z = parser.getBooleanValue();
						} else if (text == 'trait') {
							trait = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'text') {
							text = arrayOfString(parser);
						} else if (text == 'limit') {
							limit_Z = parser.getIntegerValue();
						} else if (text == 'error') {
							error = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_O consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_R {
		public List<String> trait {get;set;} 
		public Level level {get;set;} 
		public List<String> faction {get;set;} 
		public Integer limit_Z {get;set;} // in json: limit

		public Deck_options_R(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'trait') {
							trait = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'limit') {
							limit_Z = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_R consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deck_options_Q {
		public List<String> faction {get;set;} 
		public Level level {get;set;} 
		public List<String> trait {get;set;} 

		public Deck_options_Q(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'faction') {
							faction = arrayOfString(parser);
						} else if (text == 'level') {
							level = new Level(parser);
						} else if (text == 'trait') {
							trait = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Deck_options_Q consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Faction {

		public Faction(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Faction consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AR {
		public String 07004 {get;set;} 

		public Investigator_AR(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07004') {
							07004 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AR consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AQ {
		public String 07005 {get;set;} 
		public String 98013 {get;set;} 

		public Investigator_AQ(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07005') {
							07005 = parser.getText();
						} else if (text == '98013') {
							98013 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AQ consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AP {
		public String 60101 {get;set;} 

		public Investigator_AP(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60101') {
							60101 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AP consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AO {
		public String 60201 {get;set;} 

		public Investigator_AO(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60201') {
							60201 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AO consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AN {
		public String 60301 {get;set;} 

		public Investigator_AN(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60301') {
							60301 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AN consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AM {
		public String 60401 {get;set;} 

		public Investigator_AM(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60401') {
							60401 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AM consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AL {
		public String 60501 {get;set;} 

		public Investigator_AL(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60501') {
							60501 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AL consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AK {
		public String 98007 {get;set;} 

		public Investigator_AK(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '98007') {
							98007 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AK consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 03007 {
		public String 03007 {get;set;} 

		public 03007(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03007') {
							03007 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '03007 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AZ {
		public String 06001 {get;set;} 

		public Investigator_AZ(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06001') {
							06001 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AZ consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 03008 {
		public String 03008 {get;set;} 

		public 03008(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03008') {
							03008 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '03008 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AY {
		public String 06002 {get;set;} 

		public Investigator_AY(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06002') {
							06002 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AY consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 03009 {
		public String 03009 {get;set;} 

		public 03009(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '03009') {
							03009 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '03009 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AX {
		public String 06003 {get;set;} 

		public Investigator_AX(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06003') {
							06003 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AX consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AW {
		public String 06004 {get;set;} 

		public Investigator_AW(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06004') {
							06004 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AW consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AV {
		public String 06005 {get;set;} 

		public Investigator_AV(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '06005') {
							06005 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AV consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AU {
		public String 07001 {get;set;} 

		public Investigator_AU(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07001') {
							07001 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AU consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AT {
		public String 07002 {get;set;} 

		public Investigator_AT(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07002') {
							07002 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AT consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Investigator_AS {
		public String 07003 {get;set;} 

		public Investigator_AS(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '07003') {
							07003 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Investigator_AS consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 60103 {
		public String 60103 {get;set;} 

		public 60103(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60103') {
							60103 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '60103 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class 60102 {
		public String 60102 {get;set;} 

		public 60102(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '60102') {
							60102 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, '60102 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static List<AllAHCards> parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return arrayOfAllAHCards(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

    private static List<Deck_options_O> arrayOfDeck_options_O(System.JSONParser p) {
        List<Deck_options_O> res = new List<Deck_options_O>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_O(p));
        }
        return res;
    }












































    private static List<Deck_options_Y> arrayOfDeck_options_Y(System.JSONParser p) {
        List<Deck_options_Y> res = new List<Deck_options_Y>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_Y(p));
        }
        return res;
    }





    private static List<Deck_options_B> arrayOfDeck_options_B(System.JSONParser p) {
        List<Deck_options_B> res = new List<Deck_options_B>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_B(p));
        }
        return res;
    }







    private static List<Deck_options_X> arrayOfDeck_options_X(System.JSONParser p) {
        List<Deck_options_X> res = new List<Deck_options_X>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_X(p));
        }
        return res;
    }











    private static List<Deck_options_W> arrayOfDeck_options_W(System.JSONParser p) {
        List<Deck_options_W> res = new List<Deck_options_W>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_W(p));
        }
        return res;
    }















































    private static List<Deck_options_Y> arrayOfDeck_options_Y(System.JSONParser p) {
        List<Deck_options_Y> res = new List<Deck_options_Y>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_Y(p));
        }
        return res;
    }













































































    private static List<Deck_options_D> arrayOfDeck_options_D(System.JSONParser p) {
        List<Deck_options_D> res = new List<Deck_options_D>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_D(p));
        }
        return res;
    }











































    private static List<Deck_options_K> arrayOfDeck_options_K(System.JSONParser p) {
        List<Deck_options_K> res = new List<Deck_options_K>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_K(p));
        }
        return res;
    }



    private static List<Deck_options_J> arrayOfDeck_options_J(System.JSONParser p) {
        List<Deck_options_J> res = new List<Deck_options_J>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_J(p));
        }
        return res;
    }









    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }


    private static List<Deck_options_L> arrayOfDeck_options_L(System.JSONParser p) {
        List<Deck_options_L> res = new List<Deck_options_L>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_L(p));
        }
        return res;
    }























    private static List<Deck_options_R> arrayOfDeck_options_R(System.JSONParser p) {
        List<Deck_options_R> res = new List<Deck_options_R>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_R(p));
        }
        return res;
    }














    private static List<AllAHCards> arrayOfAllAHCards(System.JSONParser p) {
        List<AllAHCards> res = new List<AllAHCards>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new AllAHCards(p));
        }
        return res;
    }

















    private static List<Deck_options> arrayOfDeck_options(System.JSONParser p) {
        List<Deck_options> res = new List<Deck_options>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options(p));
        }
        return res;
    }









    private static List<Deck_options_E> arrayOfDeck_options_E(System.JSONParser p) {
        List<Deck_options_E> res = new List<Deck_options_E>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_E(p));
        }
        return res;
    }









    private static List<Deck_options_U> arrayOfDeck_options_U(System.JSONParser p) {
        List<Deck_options_U> res = new List<Deck_options_U>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_U(p));
        }
        return res;
    }






















    private static List<Deck_options_F> arrayOfDeck_options_F(System.JSONParser p) {
        List<Deck_options_F> res = new List<Deck_options_F>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_F(p));
        }
        return res;
    }



    private static List<Faction> arrayOfFaction(System.JSONParser p) {
        List<Faction> res = new List<Faction>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Faction(p));
        }
        return res;
    }






    private static List<Deck_options_H> arrayOfDeck_options_H(System.JSONParser p) {
        List<Deck_options_H> res = new List<Deck_options_H>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_H(p));
        }
        return res;
    }






    private static List<Deck_options_C> arrayOfDeck_options_C(System.JSONParser p) {
        List<Deck_options_C> res = new List<Deck_options_C>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_C(p));
        }
        return res;
    }














    private static List<Deck_options_T> arrayOfDeck_options_T(System.JSONParser p) {
        List<Deck_options_T> res = new List<Deck_options_T>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_T(p));
        }
        return res;
    }








    private static List<Bonded_cards> arrayOfBonded_cards(System.JSONParser p) {
        List<Bonded_cards> res = new List<Bonded_cards>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Bonded_cards(p));
        }
        return res;
    }


    private static List<Deck_options_S> arrayOfDeck_options_S(System.JSONParser p) {
        List<Deck_options_S> res = new List<Deck_options_S>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_S(p));
        }
        return res;
    }
















    private static List<Deck_options_U> arrayOfDeck_options_U(System.JSONParser p) {
        List<Deck_options_U> res = new List<Deck_options_U>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_U(p));
        }
        return res;
    }




    private static List<Deck_options_Z> arrayOfDeck_options_Z(System.JSONParser p) {
        List<Deck_options_Z> res = new List<Deck_options_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_Z(p));
        }
        return res;
    }




































    private static List<Deck_options_X> arrayOfDeck_options_X(System.JSONParser p) {
        List<Deck_options_X> res = new List<Deck_options_X>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_X(p));
        }
        return res;
    }





















    private static List<Deck_options_N> arrayOfDeck_options_N(System.JSONParser p) {
        List<Deck_options_N> res = new List<Deck_options_N>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_N(p));
        }
        return res;
    }





























    private static List<Random> arrayOfRandom(System.JSONParser p) {
        List<Random> res = new List<Random>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Random(p));
        }
        return res;
    }










































    private static List<Deck_options> arrayOfDeck_options(System.JSONParser p) {
        List<Deck_options> res = new List<Deck_options>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options(p));
        }
        return res;
    }


























    private static List<Deck_options_D> arrayOfDeck_options_D(System.JSONParser p) {
        List<Deck_options_D> res = new List<Deck_options_D>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_D(p));
        }
        return res;
    }










    private static List<Deck_options_X> arrayOfDeck_options_X(System.JSONParser p) {
        List<Deck_options_X> res = new List<Deck_options_X>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_X(p));
        }
        return res;
    }












































    private static List<Deck_options_C> arrayOfDeck_options_C(System.JSONParser p) {
        List<Deck_options_C> res = new List<Deck_options_C>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_C(p));
        }
        return res;
    }













    private static List<Deck_options_L> arrayOfDeck_options_L(System.JSONParser p) {
        List<Deck_options_L> res = new List<Deck_options_L>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_L(p));
        }
        return res;
    }







    private static List<Deck_options_I> arrayOfDeck_options_I(System.JSONParser p) {
        List<Deck_options_I> res = new List<Deck_options_I>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_I(p));
        }
        return res;
    }













    private static List<Deck_options_W> arrayOfDeck_options_W(System.JSONParser p) {
        List<Deck_options_W> res = new List<Deck_options_W>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_W(p));
        }
        return res;
    }














    private static List<Deck_options_V> arrayOfDeck_options_V(System.JSONParser p) {
        List<Deck_options_V> res = new List<Deck_options_V>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_V(p));
        }
        return res;
    }


    private static List<Deck_options_G> arrayOfDeck_options_G(System.JSONParser p) {
        List<Deck_options_G> res = new List<Deck_options_G>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_G(p));
        }
        return res;
    }




















    private static List<Deck_options_T> arrayOfDeck_options_T(System.JSONParser p) {
        List<Deck_options_T> res = new List<Deck_options_T>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_T(p));
        }
        return res;
    }









    private static List<Deck_options_J> arrayOfDeck_options_J(System.JSONParser p) {
        List<Deck_options_J> res = new List<Deck_options_J>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_J(p));
        }
        return res;
    }




































    private static List<Deck_options_Q> arrayOfDeck_options_Q(System.JSONParser p) {
        List<Deck_options_Q> res = new List<Deck_options_Q>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_Q(p));
        }
        return res;
    }









    private static List<Deck_options_P> arrayOfDeck_options_P(System.JSONParser p) {
        List<Deck_options_P> res = new List<Deck_options_P>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_P(p));
        }
        return res;
    }



































    private static List<Deck_options_M> arrayOfDeck_options_M(System.JSONParser p) {
        List<Deck_options_M> res = new List<Deck_options_M>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_M(p));
        }
        return res;
    }




















    private static List<Deck_options> arrayOfDeck_options(System.JSONParser p) {
        List<Deck_options> res = new List<Deck_options>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options(p));
        }
        return res;
    }








































    private static List<Deck_options_I> arrayOfDeck_options_I(System.JSONParser p) {
        List<Deck_options_I> res = new List<Deck_options_I>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_I(p));
        }
        return res;
    }








































    private static List<Deck_options_G> arrayOfDeck_options_G(System.JSONParser p) {
        List<Deck_options_G> res = new List<Deck_options_G>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Deck_options_G(p));
        }
        return res;
    }












}